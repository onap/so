/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:37:20 GMT 2016
 */

package org.openecomp.mso.cloud;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true)
public class CloudIdentityESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setMsoId("ga-cj*/");
      cloudIdentity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setTenantMetadata(true);
      boolean boolean0 = cloudIdentity0.hasTenantMetadata();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setMsoPass("");
      String string0 = cloudIdentity0.getMsoPass();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setMsoId("hz4IjQ&in.t^IC|");
      String string0 = cloudIdentity0.getMsoId();
      assertEquals("hz4IjQ&in.t^IC|", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setMemberRole("Exception in encryptPassword");
      String string0 = cloudIdentity0.getMemberRole();
      assertEquals("Exception in encryptPassword", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setIdentityUrl("ASDC_ARTIFACT_ALREADY_DEPLOYED");
      String string0 = cloudIdentity0.getIdentityUrl();
      assertEquals("ASDC_ARTIFACT_ALREADY_DEPLOYED", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      CloudIdentity.IdentityServerType cloudIdentity_IdentityServerType0 = CloudIdentity.IdentityServerType.KEYSTONE;
      PrivateAccess.setVariable((Class<CloudIdentity>) CloudIdentity.class, cloudIdentity0, "identityServerType", (Object) cloudIdentity_IdentityServerType0);
      String string0 = cloudIdentity0.getIdentityServerTypeAsString();
      assertEquals("KEYSTONE", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setId("");
      String string0 = cloudIdentity0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setAdminTenant("0hh5nz?kd3N,FTKBX");
      String string0 = cloudIdentity0.getAdminTenant();
      assertEquals("0hh5nz?kd3N,FTKBX", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setTenantMetadata(true);
      CloudIdentity cloudIdentity1 = cloudIdentity0.clone();
      assertTrue(cloudIdentity1.equals((Object)cloudIdentity0));
      assertTrue(cloudIdentity1.hasTenantMetadata());
      assertNotSame(cloudIdentity1, cloudIdentity0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setTenantMetadata(false);
      CloudIdentity cloudIdentity1 = cloudIdentity0.clone();
      assertFalse(cloudIdentity1.hasTenantMetadata());
      assertTrue(cloudIdentity1.equals((Object)cloudIdentity0));
      assertNotSame(cloudIdentity1, cloudIdentity0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setMsoPass("0LAxuQ0#K,Ma");
      // Undeclared exception!
      try {
        cloudIdentity0.getMsoPass();
        fail("Expecting exception: NumberFormatException");

      } catch(NumberFormatException e) {
         //
         // For input string: \"0L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      // Undeclared exception!
      try {
        cloudIdentity0.getKeystoneUrl();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.cloud.CloudIdentity", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try {
        CloudIdentity.encryptPassword((String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.utils.CryptoUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      CloudIdentity cloudIdentity1 = cloudIdentity0.clone();
      assertTrue(cloudIdentity1.equals((Object)cloudIdentity0));

      PrivateAccess.setVariable((Class<CloudIdentity>) CloudIdentity.class, cloudIdentity1, "msoPass", (Object) "0~=?Wm,~42b4:K");
      boolean boolean0 = cloudIdentity0.equals(cloudIdentity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setMemberRole("r");
      CloudIdentity cloudIdentity1 = new CloudIdentity();
      boolean boolean0 = cloudIdentity0.equals(cloudIdentity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      CloudIdentity cloudIdentity1 = cloudIdentity0.clone();
      assertTrue(cloudIdentity1.equals((Object)cloudIdentity0));

      cloudIdentity1.setMemberRole("RA_SET_CALLBACK_AUTH_EXC");
      boolean boolean0 = cloudIdentity0.equals(cloudIdentity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setMemberRole("r");
      CloudIdentity cloudIdentity1 = cloudIdentity0.clone();
      boolean boolean0 = cloudIdentity0.equals(cloudIdentity1);
      assertNotSame(cloudIdentity1, cloudIdentity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      Object object0 = new Object();
      boolean boolean0 = cloudIdentity0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      boolean boolean0 = cloudIdentity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      boolean boolean0 = cloudIdentity0.equals(cloudIdentity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setMsoPass("9Y#4-v1Fu27keLW");
      cloudIdentity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setMemberRole("ASDC_GENERAL_METRICS");
      cloudIdentity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setIdentityUrl("g9+j0@{H}S|");
      cloudIdentity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setId("FSmZDF:2*!OtMq!i");
      cloudIdentity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setKeystoneUrl("VdON&(o*x/W!");
      assertNull(cloudIdentity0.getMemberRole());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      String string0 = cloudIdentity0.getKeystoneUrl("A9Z Ol `I1^y]F[EC0", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      String string0 = cloudIdentity0.getMemberRole();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      // Undeclared exception!
      try {
        cloudIdentity0.getIdentityServerTypeAsString();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.cloud.CloudIdentity", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setIdentityUrl("com.att.eelf.i18n.EELFResourceManager$RESOURCE_TYPES");
      CloudIdentity cloudIdentity1 = new CloudIdentity();
      boolean boolean0 = cloudIdentity0.equals(cloudIdentity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      String string0 = cloudIdentity0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setTenantMetadata(false);
      cloudIdentity0.hashCode();
      assertFalse(cloudIdentity0.hasTenantMetadata());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.setAdminTenant("0hh5nz?kd3N,FTKBX");
      cloudIdentity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      String string0 = cloudIdentity0.getAdminTenant();
      assertNull(string0);

  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      String string0 = cloudIdentity0.getMsoId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      cloudIdentity0.getIdentityServerType();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      // Undeclared exception!
      try {
        cloudIdentity0.getMsoPass();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.utils.CryptoUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      // Undeclared exception!
      try {
        cloudIdentity0.toString();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.cloud.CloudIdentity", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      // Undeclared exception!
      try {
        cloudIdentity0.hasTenantMetadata();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.cloud.CloudIdentity", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CloudIdentity cloudIdentity0 = new CloudIdentity();
      String string0 = cloudIdentity0.getIdentityUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = CloudIdentity.encryptPassword("jaR\"aJmqpa>(&");
      assertEquals("718A16EDF9EA61E9350A07703082D5B5", string0);
  }
}
