/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:44:14 GMT 2016
 */

package org.openecomp.mso.openstack.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;

import com.woorea.openstack.quantum.model.Network;
import com.woorea.openstack.quantum.model.Segment;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class NetworkInfoESTest extends NetworkInfoESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      networkInfo0.setVlans((List<Integer>) null);
      List<Integer> list0 = networkInfo0.getVlans();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(network0).getId();
      doReturn((String) null).when(network0).getName();
      doReturn((String) null).when(network0).getProviderPhysicalNetwork();
      doReturn((List) null).when(network0).getSegments();
      doReturn((String) null).when(network0).getStatus();
      doReturn((List) null).when(network0).getSubnets();
      NetworkInfo networkInfo0 = new NetworkInfo(network0);
      List<String> list0 = networkInfo0.getSubnets();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      networkInfo0.setShared("Network [id=");
      String string0 = networkInfo0.getShared();
      assertEquals("Network [id=", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      networkInfo0.setProvider((String) null);
      String string0 = networkInfo0.getProvider();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      networkInfo0.setProvider("ERROR");
      String string0 = networkInfo0.getProvider();
      assertEquals("ERROR", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      networkInfo0.setId((String) null);
      String string0 = networkInfo0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NetworkStatus networkStatus0 = NetworkStatus.DOWN;
      NetworkInfo networkInfo0 = new NetworkInfo("IghhGdNW B*}", networkStatus0);
      String string0 = networkInfo0.getId();
      assertEquals("IghhGdNW B*}", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(network0).getId();
      doReturn((String) null).when(network0).getName();
      doReturn((String) null).when(network0).getProviderPhysicalNetwork();
      doReturn((List) null).when(network0).getSegments();
      doReturn((String) null).when(network0).getStatus();
      doReturn((List) null).when(network0).getSubnets();
      NetworkInfo networkInfo0 = new NetworkInfo(network0);
      List<String> list0 = networkInfo0.getSubnets();
      Network network1 = mock(Network.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(network1).getId();
      doReturn((String) null).when(network1).getName();
      doReturn((String) null).when(network1).getProviderPhysicalNetwork();
      doReturn((List<Segment>) null).when(network1).getSegments();
      doReturn("uxR^({\"", (String) null).when(network1).getStatus();
      doReturn(list0).when(network1).getSubnets();
      NetworkInfo networkInfo1 = new NetworkInfo(network1);
      assertNull(networkInfo1.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      doReturn(", segments: ").when(network0).getId();
      doReturn("ACTIVE").when(network0).getName();
      doReturn("l1~gC_#a'H,#*").when(network0).getProviderNetworkType();
      doReturn("ACTIVE", "").when(network0).getProviderPhysicalNetwork();
      doReturn("ERROR", "ERROR", "%<3T-").when(network0).getStatus();
      doReturn((List) null).when(network0).getSubnets();
      NetworkInfo networkInfo0 = new NetworkInfo(network0);
      networkInfo0.getStatus();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      doReturn(", segments: ").when(network0).getId();
      doReturn("ACTIVE").when(network0).getName();
      doReturn((String) null).when(network0).getProviderNetworkType();
      doReturn("ACTIVE", (String) null).when(network0).getProviderPhysicalNetwork();
      doReturn("ERROR", (String) null).when(network0).getStatus();
      NetworkInfo networkInfo0 = null;
      try {
        networkInfo0 = new NetworkInfo(network0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo((Network) null);
      assertEquals("", networkInfo0.getId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      String string0 = networkInfo0.toString();
      assertEquals("Network: name=,id=,status=UNKNOWN,provider=,vlans=[],subnets=[],shared=", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      NetworkStatus networkStatus0 = NetworkStatus.NOTFOUND;
      networkInfo0.setStatus(networkStatus0);
      assertEquals("", networkInfo0.getShared());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkStatus networkStatus0 = NetworkStatus.UNKNOWN;
      NetworkInfo networkInfo0 = new NetworkInfo((String) null, networkStatus0);
      String string0 = networkInfo0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      networkInfo0.setShared((String) null);
      String string0 = networkInfo0.getShared();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      String string0 = networkInfo0.getShared();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      List<String> list0 = networkInfo0.getSubnets();
      Network network0 = mock(Network.class, new ViolatedAssumptionAnswer());
      doReturn("R65k@>rbu`lzb#").when(network0).getId();
      doReturn("ERROR").when(network0).getName();
      doReturn("DOWN").when(network0).getProviderNetworkType();
      doReturn("u1Z(%z~k-ao5#y", "R65k@>rbu`lzb#").when(network0).getProviderPhysicalNetwork();
      doReturn("R65k@>rbu`lzb#", "R65k@>rbu`lzb#").when(network0).getStatus();
      doReturn(list0).when(network0).getSubnets();
      NetworkInfo networkInfo1 = new NetworkInfo(network0);
      networkInfo1.getName();
      assertEquals("R65k@>rbu`lzb#", networkInfo1.getProvider());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      List<Integer> list0 = networkInfo0.getVlans();
      networkInfo0.setVlans(list0);
      assertEquals("", networkInfo0.getProvider());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      networkInfo0.setName("");
      assertEquals(NetworkStatus.UNKNOWN, networkInfo0.getStatus());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      networkInfo0.setSubnets((List<String>) null);
      assertEquals("", networkInfo0.getShared());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      NetworkStatus networkStatus0 = networkInfo0.getStatus();
      assertEquals(NetworkStatus.UNKNOWN, networkStatus0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      String string0 = networkInfo0.getProvider();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      String string0 = networkInfo0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NetworkInfo networkInfo0 = new NetworkInfo();
      String string0 = networkInfo0.getName();
      assertEquals("", string0);
  }
}
