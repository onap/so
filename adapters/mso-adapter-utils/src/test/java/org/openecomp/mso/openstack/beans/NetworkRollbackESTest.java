/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:55:12 GMT 2016
 */

package org.openecomp.mso.openstack.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import org.openecomp.mso.entity.MsoRequest;

import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class NetworkRollbackESTest extends NetworkRollbackESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkStackId("H/r!m+_NT$?ed$IPcLD");
      networkRollback0.setNeutronNetworkId("H/r!m+_NT$?ed$IPcLD");
      MsoRequest msoRequest0 = mock(MsoRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(msoRequest0).toString();
      networkRollback0.setNetworkStackId("");
      networkRollback0.setMsoRequest((MsoRequest) null);
      networkRollback0.setMsoRequest(msoRequest0);
      networkRollback0.toString();
      networkRollback0.setNeutronNetworkId("NetworkRollback [networkId=null, neutronNetworkId=H/r!m+_NT$?ed$IPcLD, networkStackId=, tenantId=null, cloudId=null, networkType=null, networkCreated=false, networkName=null, physicalNetwork=null]");
      networkRollback0.getVlans();
      networkRollback0.setCloudId("NetworkRollback [networkId=null, neutronNetworkId=H/r!m+_NT$?ed$IPcLD, networkStackId=, tenantId=null, cloudId=null, networkType=null, networkCreated=false, networkName=null, physicalNetwork=null]");
      networkRollback0.setNetworkType("NetworkRollback [networkId=null, neutronNetworkId=H/r!m+_NT$?ed$IPcLD, networkStackId=, tenantId=null, cloudId=null, networkType=null, networkCreated=false, networkName=null, physicalNetwork=null]");
      networkRollback0.toString();
      networkRollback0.setCloudId("NetworkRollback [networkId=null, neutronNetworkId=H/r!m+_NT$?ed$IPcLD, networkStackId=, tenantId=null, cloudId=null, networkType=null, networkCreated=false, networkName=null, physicalNetwork=null]");
      networkRollback0.setTenantId("80\u0002<]~y|x(#fl");
      networkRollback0.setCloudId("=:U\"]");
      networkRollback0.toString();
      networkRollback0.getVlans();
      networkRollback0.toString();
      networkRollback0.getVlans();
      networkRollback0.getVlans();
      networkRollback0.getVlans();
      networkRollback0.setVlans((List<Integer>) null);
      networkRollback0.toString();
      networkRollback0.getMsoRequest();
      networkRollback0.getVlans();
      networkRollback0.toString();
      networkRollback0.getMsoRequest();
      networkRollback0.getVlans();
      networkRollback0.getMsoRequest();
      networkRollback0.getVlans();
      List<Integer> list0 = networkRollback0.getVlans();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkType((String) null);
      networkRollback0.getMsoRequest();
      networkRollback0.setMsoRequest((MsoRequest) null);
      networkRollback0.setNetworkId("");
      networkRollback0.setTenantId("");
      networkRollback0.getNetworkId();
      networkRollback0.setNeutronNetworkId("");
      networkRollback0.setCloudId("O;On");
      assertFalse(networkRollback0.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setCloudId("C5FS|V@CMBag");
      networkRollback0.getVlans();
      networkRollback0.setVlans((List<Integer>) null);
      networkRollback0.getPhysicalNetwork();
      networkRollback0.setVlans((List<Integer>) null);
      networkRollback0.getNeutronNetworkId();
      networkRollback0.setNetworkType("C5FS|V@CMBag");
      networkRollback0.getNetworkType();
      assertFalse(networkRollback0.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkId(", networkName=");
      networkRollback0.setNetworkStackId("u)");
      networkRollback0.setNetworkId("u)");
      networkRollback0.setNetworkId(", networkName=");
      networkRollback0.getNetworkStackId();
      assertFalse(networkRollback0.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkType("V3$f~dKduUu0");
      networkRollback0.setNetworkType("");
      networkRollback0.setTenantId("");
      networkRollback0.getPhysicalNetwork();
      networkRollback0.getVlans();
      networkRollback0.getNetworkType();
      assertFalse(networkRollback0.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setTenantId("Lu#)!pt2p=<#T.");
      networkRollback0.getTenantId();
      networkRollback0.setNetworkStackId("Lu#)!pt2p=<#T.");
      networkRollback0.getNeutronNetworkId();
      networkRollback0.setTenantId("Lu#)!pt2p=<#T.");
      networkRollback0.setNetworkStackId((String) null);
      String string0 = networkRollback0.toString();
      assertEquals("NetworkRollback [networkId=null, neutronNetworkId=null, networkStackId=null, tenantId=Lu#)!pt2p=<#T., cloudId=null, networkType=null, networkCreated=false, networkName=null, physicalNetwork=null]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.getMsoRequest();
      networkRollback0.setMsoRequest((MsoRequest) null);
      String string0 = networkRollback0.toString();
      assertEquals("NetworkRollback [networkId=null, neutronNetworkId=null, networkStackId=null, tenantId=null, cloudId=null, networkType=null, networkCreated=false, networkName=null, physicalNetwork=null]", string0);
      
      networkRollback0.setNetworkName("");
      networkRollback0.getNetworkName();
      networkRollback0.setNetworkCreated(true);
      networkRollback0.setNetworkName("");
      networkRollback0.getPhysicalNetwork();
      networkRollback0.setTenantId("");
      networkRollback0.setNetworkId("");
      assertTrue(networkRollback0.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.getTenantId();
      networkRollback0.setNetworkStackId((String) null);
      networkRollback0.getVlans();
      networkRollback0.setTenantId("");
      networkRollback0.getTenantId();
      networkRollback0.setVlans((List<Integer>) null);
      String string0 = networkRollback0.toString();
      assertEquals("NetworkRollback [networkId=null, neutronNetworkId=null, networkStackId=null, tenantId=, cloudId=null, networkType=null, networkCreated=false, networkName=null, physicalNetwork=null]", string0);
      
      NetworkRollback networkRollback1 = new NetworkRollback();
      assertFalse(networkRollback1.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNeutronNetworkId("");
      networkRollback0.setCloudId("");
      networkRollback0.getTenantId();
      networkRollback0.setTenantId("");
      networkRollback0.setNetworkType("Y=x>wx'");
      networkRollback0.getNeutronNetworkId();
      networkRollback0.getVlans();
      networkRollback0.setVlans((List<Integer>) null);
      networkRollback0.setNetworkStackId("6P7@4aGo &Kd>V");
      networkRollback0.getCloudId();
      NetworkRollback networkRollback1 = new NetworkRollback();
      assertFalse(networkRollback1.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      assertFalse(networkRollback0.getNetworkCreated());
      
      networkRollback0.setNetworkCreated(true);
      networkRollback0.toString();
      networkRollback0.setNeutronNetworkId("NetworkRollback [networkId=null, neutronNetworkId=null, networkStackId=null, tenantId=null, cloudId=null, networkType=null, networkCreated=true, networkName=null, physicalNetwork=null]");
      networkRollback0.getPhysicalNetwork();
      boolean boolean0 = networkRollback0.getNetworkCreated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkId(", tenantId=");
      networkRollback0.setNetworkId("");
      networkRollback0.setTenantId(", tenantId=");
      networkRollback0.setNetworkName("+*");
      networkRollback0.getNetworkName();
      networkRollback0.setNetworkStackId(", tenantId=");
      networkRollback0.setCloudId("+*");
      networkRollback0.getCloudId();
      NetworkRollback networkRollback1 = new NetworkRollback();
      assertFalse(networkRollback1.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setPhysicalNetwork("!(>41heY7e");
      networkRollback0.setTenantId("j");
      networkRollback0.setNeutronNetworkId("j");
      networkRollback0.getPhysicalNetwork();
      networkRollback0.getVlans();
      NetworkRollback networkRollback1 = new NetworkRollback();
      networkRollback1.getMsoRequest();
      networkRollback0.setMsoRequest((MsoRequest) null);
      networkRollback0.setNetworkCreated(false);
      networkRollback0.setNeutronNetworkId("j");
      assertFalse(networkRollback0.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setPhysicalNetwork("");
      networkRollback0.setNetworkStackId("");
      networkRollback0.setNeutronNetworkId("");
      networkRollback0.getNetworkStackId();
      networkRollback0.getMsoRequest();
      assertFalse(networkRollback0.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setCloudId("7u@lc[l##+g`2V");
      networkRollback0.getVlans();
      networkRollback0.setVlans((List<Integer>) null);
      networkRollback0.setNetworkType("");
      networkRollback0.setCloudId(", physicalNetwork=");
      networkRollback0.setPhysicalNetwork("");
      networkRollback0.setNeutronNetworkId(", physicalNetwork=");
      networkRollback0.getPhysicalNetwork();
      networkRollback0.getNeutronNetworkId();
      assertFalse(networkRollback0.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.getNetworkId();
      assertFalse(networkRollback0.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.getMsoRequest();
      networkRollback0.setMsoRequest((MsoRequest) null);
      networkRollback0.getNetworkCreated();
      networkRollback0.setNetworkId(", networkName=");
      networkRollback0.getNeutronNetworkId();
      networkRollback0.setPhysicalNetwork((String) null);
      networkRollback0.getNetworkId();
      NetworkRollback networkRollback1 = new NetworkRollback();
      String string0 = networkRollback1.toString();
      assertEquals("NetworkRollback [networkId=null, neutronNetworkId=null, networkStackId=null, tenantId=null, cloudId=null, networkType=null, networkCreated=false, networkName=null, physicalNetwork=null]", string0);
      
      networkRollback1.getVlans();
      networkRollback0.setVlans((List<Integer>) null);
      networkRollback0.getNetworkId();
      networkRollback1.getPhysicalNetwork();
      networkRollback1.setNetworkCreated(false);
      assertFalse(networkRollback1.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.getNetworkType();
      networkRollback0.setTenantId((String) null);
      networkRollback0.setNetworkName(" networkStacId=");
      networkRollback0.getCloudId();
      networkRollback0.getTenantId();
      networkRollback0.setNetworkStackId(" networkStacId=");
      networkRollback0.setNeutronNetworkId((String) null);
      assertFalse(networkRollback0.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.getNetworkName();
      assertFalse(networkRollback0.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkType("uK+JCvyg\"J(C d.w[");
      networkRollback0.setCloudId("uK+JCvyg\"J(C d.w[");
      networkRollback0.getNetworkStackId();
      assertFalse(networkRollback0.getNetworkCreated());
  }
}
