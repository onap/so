/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:51:17 GMT 2016
 */

package org.openecomp.mso.openstack.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;

import org.openecomp.mso.entity.MsoRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class VnfRollbackESTest extends VnfRollbackESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setVolumeGroupName(", vnfCreated=");
      vnfRollback0.getVolumeGroupName();
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setVolumeGroupId("}mvn2f6!r5FG1/_M~M");
      vnfRollback0.getVolumeGroupId();
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setVolumeGroupId("");
      vnfRollback0.getVolumeGroupId();
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setVolumeGroupHeatStackId("Z^t$4-eOKP9");
      vnfRollback0.getVolumeGroupHeatStackId();
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.getVnfId();
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setVnfId("");
      vnfRollback0.getVnfId();
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setVfModuleStackId("8y*`!>A$@*l8#a>");
      vnfRollback0.getVfModuleStackId();
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getVnfCreated());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setVfModuleStackId("");
      vnfRollback0.getVfModuleStackId();
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback(", tenant=", ", tenant=", ", tenant=", false, false, (MsoRequest) null, ", tenant=", "f5`2h^e^.-x", ", tenant=");
      String string0 = vnfRollback0.getTenantId();
      assertFalse(vnfRollback0.getVnfCreated());
      assertEquals(", tenant=", vnfRollback0.getCloudSiteId());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.isBase());
      assertEquals(", tenant=", vnfRollback0.getRequestType());
      assertEquals("f5`2h^e^.-x", vnfRollback0.getVolumeGroupId());
      assertEquals(", tenant=", vnfRollback0.getVolumeGroupName());
      assertEquals(", tenant=", vnfRollback0.getVnfId());
      assertEquals(", tenant=", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setTenantId("");
      vnfRollback0.getTenantId();
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.getTenantCreated());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      assertFalse(vnfRollback0.getTenantCreated());
      
      vnfRollback0.setTenantCreated(true);
      boolean boolean0 = vnfRollback0.getTenantCreated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MsoRequest msoRequest0 = mock(MsoRequest.class, new ViolatedAssumptionAnswer());
      VnfRollback vnfRollback0 = new VnfRollback("", ", vnf=", "Jvr", false, false, msoRequest0, "", "f'D", "VnfRollback: cloud=");
      String string0 = vnfRollback0.getRequestType();
      assertFalse(vnfRollback0.isBase());
      assertEquals("Jvr", vnfRollback0.getCloudSiteId());
      assertEquals("", vnfRollback0.getVnfId());
      assertFalse(vnfRollback0.getTenantCreated());
      assertEquals("f'D", vnfRollback0.getVolumeGroupId());
      assertEquals(", vnf=", vnfRollback0.getTenantId());
      assertEquals("VnfRollback: cloud=", string0);
      assertFalse(vnfRollback0.getVnfCreated());
      assertEquals("", vnfRollback0.getVolumeGroupName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setRequestType("");
      vnfRollback0.getRequestType();
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MsoRequest msoRequest0 = mock(MsoRequest.class, new ViolatedAssumptionAnswer());
      doReturn("Jvr").when(msoRequest0).toString();
      VnfRollback vnfRollback0 = new VnfRollback("", ", vnf=", "Jvr", false, false, msoRequest0, "", "f'D", "VnfRollback: cloud=");
      vnfRollback0.getMsoRequest();
      assertEquals("Jvr", vnfRollback0.getCloudSiteId());
      assertEquals("", vnfRollback0.getVnfId());
      assertFalse(vnfRollback0.isBase());
      assertEquals(", vnf=", vnfRollback0.getTenantId());
      assertEquals("", vnfRollback0.getVolumeGroupName());
      assertEquals("f'D", vnfRollback0.getVolumeGroupId());
      assertEquals("VnfRollback: cloud=", vnfRollback0.getRequestType());
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.getTenantCreated());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback(", tenant=", ", tenant=", ", tenant=", false, false, (MsoRequest) null, ", tenant=", "f5`2h^e^.-x", ", tenant=");
      String string0 = vnfRollback0.getCloudSiteId();
      assertFalse(vnfRollback0.isBase());
      assertEquals(", tenant=", string0);
      assertEquals("f5`2h^e^.-x", vnfRollback0.getVolumeGroupId());
      assertFalse(vnfRollback0.getVnfCreated());
      assertEquals(", tenant=", vnfRollback0.getVnfId());
      assertFalse(vnfRollback0.getTenantCreated());
      assertEquals(", tenant=", vnfRollback0.getVolumeGroupName());
      assertEquals(", tenant=", vnfRollback0.getRequestType());
      assertEquals(", tenant=", vnfRollback0.getTenantId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setCloudSiteId("");
      vnfRollback0.getCloudSiteId();
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getTenantCreated());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setBaseGroupHeatStackId("3(6Q^)Ic kf:zj");
      vnfRollback0.getBaseGroupHeatStackId();
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setBaseGroupHeatStackId("");
      vnfRollback0.getBaseGroupHeatStackId();
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.getTenantCreated());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      assertFalse(vnfRollback0.isBase());
      
      vnfRollback0.setIsBase(true);
      boolean boolean0 = vnfRollback0.isBase();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.getVfModuleStackId();
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.getVolumeGroupName();
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getTenantCreated());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setVolumeGroupName("");
      vnfRollback0.getVolumeGroupName();
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      boolean boolean0 = vnfRollback0.getTenantCreated();
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(boolean0);
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      boolean boolean0 = vnfRollback0.isBase();
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      String string0 = vnfRollback0.toString();
      assertFalse(vnfRollback0.isBase());
      assertEquals("VnfRollback: cloud=null, tenant=null, vnf=null, tenantCreated=false, vnfCreated=false, requestType = null", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      boolean boolean0 = vnfRollback0.getVnfCreated();
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(boolean0);
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.getVolumeGroupHeatStackId();
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.getBaseGroupHeatStackId();
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.getCloudSiteId();
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.getTenantId();
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getVnfCreated());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      MsoRequest msoRequest0 = mock(MsoRequest.class, new ViolatedAssumptionAnswer());
      vnfRollback0.setMsoRequest(msoRequest0);
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.getMsoRequest();
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      assertFalse(vnfRollback0.getVnfCreated());
      
      vnfRollback0.setVnfCreated(true);
      boolean boolean0 = vnfRollback0.getVnfCreated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.getVolumeGroupId();
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.isBase());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.getRequestType();
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback();
      vnfRollback0.setVolumeGroupHeatStackId("");
      vnfRollback0.getVolumeGroupHeatStackId();
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getTenantCreated());
      assertFalse(vnfRollback0.getVnfCreated());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VnfRollback vnfRollback0 = new VnfRollback(", tenant=", ", tenant=", ", tenant=", false, false, (MsoRequest) null, ", tenant=", "f5`2h^e^.-x", ", tenant=");
      String string0 = vnfRollback0.getVnfId();
      assertEquals(", tenant=", string0);
      assertEquals(", tenant=", vnfRollback0.getTenantId());
      assertFalse(vnfRollback0.getVnfCreated());
      assertFalse(vnfRollback0.isBase());
      assertFalse(vnfRollback0.getTenantCreated());
      assertEquals(", tenant=", vnfRollback0.getCloudSiteId());
      assertEquals(", tenant=", vnfRollback0.getVolumeGroupName());
      assertEquals(", tenant=", vnfRollback0.getRequestType());
      assertEquals("f5`2h^e^.-x", vnfRollback0.getVolumeGroupId());
  }
}
