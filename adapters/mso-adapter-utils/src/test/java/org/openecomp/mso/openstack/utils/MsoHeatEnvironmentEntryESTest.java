/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:40:12 GMT 2016
 */

package org.openecomp.mso.openstack.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.openecomp.mso.db.catalog.beans.HeatTemplateParam;

import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true)
public class MsoHeatEnvironmentEntryESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      Set<MsoHeatEnvironmentResource> set0 = (Set<MsoHeatEnvironmentResource>) mock(Set.class, new ViolatedAssumptionAnswer());
      doReturn((-237540137)).when(set0).size();
      msoHeatEnvironmentEntry0.setResources(set0);
      boolean boolean0 = msoHeatEnvironmentEntry0.hasResources();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      PrivateAccess.setVariable((Class<MsoHeatEnvironmentEntry>) MsoHeatEnvironmentEntry.class, msoHeatEnvironmentEntry0, "valid", (Object) false);
      boolean boolean0 = msoHeatEnvironmentEntry0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<MsoHeatEnvironmentResource> linkedHashSet0 = new LinkedHashSet<MsoHeatEnvironmentResource>();
      msoHeatEnvironmentEntry0.setResources(linkedHashSet0);
      msoHeatEnvironmentEntry0.getResources();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentResource msoHeatEnvironmentResource0 = new MsoHeatEnvironmentResource("9>KEckx", "8&T!e[SABZ");
      msoHeatEnvironmentEntry0.addResource(msoHeatEnvironmentResource0);
      msoHeatEnvironmentEntry0.getResources();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      StringBuilder stringBuilder0 = msoHeatEnvironmentEntry0.toFullString();
      PrivateAccess.setVariable((Class<MsoHeatEnvironmentEntry>) MsoHeatEnvironmentEntry.class, msoHeatEnvironmentEntry0, "rawEntry", (Object) stringBuilder0);
      StringBuilder stringBuilder1 = msoHeatEnvironmentEntry0.getRawEntry();
      assertEquals("\nnull", stringBuilder1.toString());
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<MsoHeatEnvironmentParameter> linkedHashSet0 = new LinkedHashSet<MsoHeatEnvironmentParameter>();
      msoHeatEnvironmentEntry0.setParameters(linkedHashSet0);
      msoHeatEnvironmentEntry0.getParameters();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter();
      msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter0);
      msoHeatEnvironmentEntry0.getParameters();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<MsoHeatEnvironmentResource> linkedHashSet0 = new LinkedHashSet<MsoHeatEnvironmentResource>();
      msoHeatEnvironmentEntry0.setResources(linkedHashSet0);
      msoHeatEnvironmentEntry0.getNumberOfResources();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentResource msoHeatEnvironmentResource0 = new MsoHeatEnvironmentResource();
      msoHeatEnvironmentEntry0.addResource(msoHeatEnvironmentResource0);
      msoHeatEnvironmentEntry0.getNumberOfResources();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      Set<MsoHeatEnvironmentResource> set0 = (Set<MsoHeatEnvironmentResource>) mock(Set.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(set0).size();
      msoHeatEnvironmentEntry0.setResources(set0);
      msoHeatEnvironmentEntry0.getNumberOfResources();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<MsoHeatEnvironmentParameter> linkedHashSet0 = new LinkedHashSet<MsoHeatEnvironmentParameter>();
      msoHeatEnvironmentEntry0.setParameters(linkedHashSet0);
      msoHeatEnvironmentEntry0.getNumberOfParameters();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter();
      msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter0);
      msoHeatEnvironmentEntry0.getNumberOfParameters();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      PrivateAccess.setVariable((Class<MsoHeatEnvironmentEntry>) MsoHeatEnvironmentEntry.class, msoHeatEnvironmentEntry0, "errorString", (Object) "Param=");
      msoHeatEnvironmentEntry0.getErrorString();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      Set<HeatTemplateParam> set0 = (Set<HeatTemplateParam>) mock(Set.class, new ViolatedAssumptionAnswer());
      doReturn((-2945)).when(set0).size();
      // Undeclared exception!
      try {
        msoHeatEnvironmentEntry0.toFullStringExcludeNonParams(set0);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2945
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<MsoHeatEnvironmentParameter> linkedHashSet0 = new LinkedHashSet<MsoHeatEnvironmentParameter>();
      linkedHashSet0.add((MsoHeatEnvironmentParameter) null);
      msoHeatEnvironmentEntry0.setParameters(linkedHashSet0);
      // Undeclared exception!
      try {
        msoHeatEnvironmentEntry0.toFullString();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.openstack.utils.MsoHeatEnvironmentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter();
      msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter0);
      // Undeclared exception!
      try {
        msoHeatEnvironmentEntry0.containsParameter((String) null, "");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.openstack.utils.MsoHeatEnvironmentParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<MsoHeatEnvironmentParameter> linkedHashSet0 = new LinkedHashSet<MsoHeatEnvironmentParameter>();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter();
      linkedHashSet0.add(msoHeatEnvironmentParameter0);
      msoHeatEnvironmentEntry0.setParameters(linkedHashSet0);
      // Undeclared exception!
      try {
        msoHeatEnvironmentEntry0.containsParameter((String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.openstack.utils.MsoHeatEnvironmentParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentResource msoHeatEnvironmentResource0 = new MsoHeatEnvironmentResource();
      msoHeatEnvironmentEntry0.addResource(msoHeatEnvironmentResource0);
      MsoHeatEnvironmentResource msoHeatEnvironmentResource1 = new MsoHeatEnvironmentResource();
      // Undeclared exception!
      try {
        msoHeatEnvironmentEntry0.addResource(msoHeatEnvironmentResource1);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.openstack.utils.MsoHeatEnvironmentResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter();
      msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter0);
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter1 = new MsoHeatEnvironmentParameter();
      // Undeclared exception!
      try {
        msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter1);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.openstack.utils.MsoHeatEnvironmentParameter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter("", "");
      msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter0);
      boolean boolean0 = msoHeatEnvironmentEntry0.containsParameter("");
      assertTrue(msoHeatEnvironmentEntry0.isValid());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter();
      msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter0);
      boolean boolean0 = msoHeatEnvironmentEntry0.hasParameters();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      msoHeatEnvironmentEntry0.hasParameters();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<MsoHeatEnvironmentParameter> linkedHashSet0 = new LinkedHashSet<MsoHeatEnvironmentParameter>();
      msoHeatEnvironmentEntry0.setParameters(linkedHashSet0);
      boolean boolean0 = msoHeatEnvironmentEntry0.hasParameters();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      PrivateAccess.callMethod((Class<MsoHeatEnvironmentEntry>) MsoHeatEnvironmentEntry.class, msoHeatEnvironmentEntry0, "getResourceRegistryRawEntry");
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<HeatTemplateParam> linkedHashSet0 = new LinkedHashSet<HeatTemplateParam>();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter();
      msoHeatEnvironmentParameter0.setValue("_BAD");
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      linkedHashSet0.add(heatTemplateParam0);
      msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter0);
      msoHeatEnvironmentEntry0.toFullStringExcludeNonParams(linkedHashSet0);
      assertTrue(msoHeatEnvironmentEntry0.hasParameters());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<HeatTemplateParam> linkedHashSet0 = new LinkedHashSet<HeatTemplateParam>();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter();
      msoHeatEnvironmentParameter0.setValue("t'N`.KI:L9");
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      linkedHashSet0.add(heatTemplateParam0);
      msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter0);
      msoHeatEnvironmentEntry0.toFullStringExcludeNonParams(linkedHashSet0);
      assertTrue(msoHeatEnvironmentEntry0.hasParameters());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<HeatTemplateParam> linkedHashSet0 = new LinkedHashSet<HeatTemplateParam>();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter();
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      linkedHashSet0.add(heatTemplateParam0);
      msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter0);
      // Undeclared exception!
      try {
        msoHeatEnvironmentEntry0.toFullStringExcludeNonParams(linkedHashSet0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter("");
      msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter0);
      LinkedHashSet<HeatTemplateParam> linkedHashSet0 = new LinkedHashSet<HeatTemplateParam>();
      msoHeatEnvironmentEntry0.toFullStringExcludeNonParams(linkedHashSet0);
      assertTrue(msoHeatEnvironmentEntry0.hasParameters());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<HeatTemplateParam> linkedHashSet0 = new LinkedHashSet<HeatTemplateParam>();
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      linkedHashSet0.add(heatTemplateParam0);
      msoHeatEnvironmentEntry0.toFullStringExcludeNonParams(linkedHashSet0);
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      assertFalse(msoHeatEnvironmentEntry0.hasParameters());

      LinkedHashSet<HeatTemplateParam> linkedHashSet0 = new LinkedHashSet<HeatTemplateParam>();
      StringBuilder stringBuilder0 = msoHeatEnvironmentEntry0.toFullStringExcludeNonParams(linkedHashSet0);
      PrivateAccess.setVariable((Class<MsoHeatEnvironmentEntry>) MsoHeatEnvironmentEntry.class, msoHeatEnvironmentEntry0, "rawEntry", (Object) stringBuilder0);
      StringBuilder stringBuilder1 = (StringBuilder)PrivateAccess.callMethod((Class<MsoHeatEnvironmentEntry>) MsoHeatEnvironmentEntry.class, msoHeatEnvironmentEntry0, "getResourceRegistryRawEntry");
      assertTrue(msoHeatEnvironmentEntry0.isValid());
      assertNull(stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter("");
      msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter0);
      boolean boolean0 = msoHeatEnvironmentEntry0.containsParameter("9MTP2Qt0FH.^", "");
      assertTrue(boolean0);
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      boolean boolean0 = msoHeatEnvironmentEntry0.containsParameter("dP:* hj", "dP:* hj");
      assertFalse(boolean0);
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = new MsoHeatEnvironmentParameter("");
      msoHeatEnvironmentEntry0.addParameter(msoHeatEnvironmentParameter0);
      boolean boolean0 = msoHeatEnvironmentEntry0.containsParameter("", "");
      assertTrue(boolean0);
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<MsoHeatEnvironmentParameter> linkedHashSet0 = new LinkedHashSet<MsoHeatEnvironmentParameter>();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = mock(MsoHeatEnvironmentParameter.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(msoHeatEnvironmentParameter0);
      msoHeatEnvironmentEntry0.setParameters(linkedHashSet0);
      boolean boolean0 = msoHeatEnvironmentEntry0.containsParameter("kz`LZx");
      assertTrue(msoHeatEnvironmentEntry0.hasParameters());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<MsoHeatEnvironmentParameter> linkedHashSet0 = new LinkedHashSet<MsoHeatEnvironmentParameter>();
      msoHeatEnvironmentEntry0.setParameters(linkedHashSet0);
      boolean boolean0 = msoHeatEnvironmentEntry0.containsParameter("kz`LZx");
      assertFalse(boolean0);
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      boolean boolean0 = msoHeatEnvironmentEntry0.containsParameter(",=?%4z");
      assertTrue(msoHeatEnvironmentEntry0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      LinkedHashSet<MsoHeatEnvironmentParameter> linkedHashSet0 = new LinkedHashSet<MsoHeatEnvironmentParameter>();
      MsoHeatEnvironmentParameter msoHeatEnvironmentParameter0 = mock(MsoHeatEnvironmentParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(msoHeatEnvironmentParameter0).getName();
      doReturn((String) null).when(msoHeatEnvironmentParameter0).getValue();
      linkedHashSet0.add(msoHeatEnvironmentParameter0);
      msoHeatEnvironmentEntry0.setParameters(linkedHashSet0);
      msoHeatEnvironmentEntry0.toFullString();
      assertTrue(msoHeatEnvironmentEntry0.hasParameters());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      MsoHeatEnvironmentResource msoHeatEnvironmentResource0 = new MsoHeatEnvironmentResource("");
      msoHeatEnvironmentEntry0.addResource(msoHeatEnvironmentResource0);
      boolean boolean0 = msoHeatEnvironmentEntry0.hasResources();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      Set<MsoHeatEnvironmentResource> set0 = (Set<MsoHeatEnvironmentResource>) mock(Set.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(set0).size();
      msoHeatEnvironmentEntry0.setResources(set0);
      boolean boolean0 = msoHeatEnvironmentEntry0.hasResources();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      boolean boolean0 = msoHeatEnvironmentEntry0.hasResources();
      assertFalse(boolean0);
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      msoHeatEnvironmentEntry0.setResources((Set<MsoHeatEnvironmentResource>) null);
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      msoHeatEnvironmentEntry0.setParameters((Set<MsoHeatEnvironmentParameter>) null);
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }


  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      // Undeclared exception!
      try {
        msoHeatEnvironmentEntry0.getNumberOfResources();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.openstack.utils.MsoHeatEnvironmentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      boolean boolean0 = msoHeatEnvironmentEntry0.isValid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry((StringBuilder) null);
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      // Undeclared exception!
      try {
        msoHeatEnvironmentEntry0.getNumberOfParameters();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.openstack.utils.MsoHeatEnvironmentEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      msoHeatEnvironmentEntry0.getRawEntry();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      msoHeatEnvironmentEntry0.getParameters();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      msoHeatEnvironmentEntry0.getResources();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MsoHeatEnvironmentEntry msoHeatEnvironmentEntry0 = new MsoHeatEnvironmentEntry();
      msoHeatEnvironmentEntry0.getErrorString();
      assertTrue(msoHeatEnvironmentEntry0.isValid());
  }
}
