/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:26:16 GMT 2016
 */

package org.openecomp.mso.adapters.nwrest;

import org.junit.Test;
import static org.junit.Assert.*;

import org.openecomp.mso.openstack.beans.NetworkRollback;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class CreateNetworkResponseESTest extends CreateNetworkResponseESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      createNetworkResponse0.setSubnetMap(hashMap0);
      Map<String, String> map0 = createNetworkResponse0.getSubnetMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", (String) null);
      createNetworkResponse0.setSubnetMap(hashMap0);
      Map<String, String> map0 = createNetworkResponse0.getSubnetMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      createNetworkResponse0.setRollback((NetworkRollback) null);
      NetworkRollback networkRollback0 = createNetworkResponse0.getRollback();
      assertNull(networkRollback0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkCreated(true);
      createNetworkResponse0.setRollback(networkRollback0);
      NetworkRollback networkRollback1 = createNetworkResponse0.getRollback();
      assertNull(networkRollback1.getNetworkName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      NetworkRollback networkRollback0 = new NetworkRollback();
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse("RmsrRU", "D=<", "D=<", "RmsrRU", boolean0, (Map<String, String>) null, networkRollback0, "0V");
      String string0 = createNetworkResponse0.getNeutronNetworkId();
      assertEquals("RmsrRU", createNetworkResponse0.getNetworkFqdn());
      assertEquals("D=<", createNetworkResponse0.getNetworkStackId());
      assertEquals("RmsrRU", createNetworkResponse0.getNetworkId());
      assertEquals("D=<", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      NetworkRollback networkRollback0 = new NetworkRollback();
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse("", "", "SouUi*E=\"K.O", "", boolean0, (Map<String, String>) null, networkRollback0, "");
      String string0 = createNetworkResponse0.getNeutronNetworkId();
      assertEquals("", createNetworkResponse0.getNetworkFqdn());
      assertEquals("", string0);
      assertEquals("", createNetworkResponse0.getNetworkId());
      assertEquals("SouUi*E=\"K.O", createNetworkResponse0.getNetworkStackId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse("", "", "", "NetworkRollback [networkId=", boolean0, (Map<String, String>) null, (NetworkRollback) null, (String) null);
      String string0 = createNetworkResponse0.getNetworkStackId();
      assertEquals("", createNetworkResponse0.getNeutronNetworkId());
      assertEquals("", createNetworkResponse0.getNetworkId());
      assertNotNull(string0);
      assertEquals("NetworkRollback [networkId=", createNetworkResponse0.getNetworkFqdn());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(", tenantId=");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NetworkRollback networkRollback0 = new NetworkRollback();
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse(", tenantId=", "L", "L", ", tenantId=", boolean0, (Map<String, String>) hashMap0, networkRollback0, "o+oNP;9q:Yc_JWzxM");
      String string0 = createNetworkResponse0.getNetworkId();
      assertEquals("L", createNetworkResponse0.getNetworkStackId());
      assertEquals(", tenantId=", string0);
      assertEquals("L", createNetworkResponse0.getNeutronNetworkId());
      assertEquals(", tenantId=", createNetworkResponse0.getNetworkFqdn());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse("", "", "", "NetworkRollback [networkId=", boolean0, (Map<String, String>) null, (NetworkRollback) null, (String) null);
      String string0 = createNetworkResponse0.getNetworkId();
      assertEquals("", createNetworkResponse0.getNetworkStackId());
      assertNotNull(string0);
      assertEquals("NetworkRollback [networkId=", createNetworkResponse0.getNetworkFqdn());
      assertEquals("", string0);
      assertEquals("", createNetworkResponse0.getNeutronNetworkId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      createNetworkResponse0.setNetworkFqdn(",E4f.8o)&~");
      String string0 = createNetworkResponse0.getNetworkFqdn();
      assertEquals(",E4f.8o)&~", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      createNetworkResponse0.setNetworkFqdn("");
      String string0 = createNetworkResponse0.getNetworkFqdn();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      Boolean boolean0 = createNetworkResponse0.getNetworkCreated();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      NetworkRollback networkRollback0 = new NetworkRollback();
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse("", "", "SouUi*E=\"K.O", "", boolean0, (Map<String, String>) null, networkRollback0, "");
      createNetworkResponse0.getNetworkCreated();
      assertEquals("", createNetworkResponse0.getNetworkFqdn());
      assertEquals("", createNetworkResponse0.getNeutronNetworkId());
      assertEquals("SouUi*E=\"K.O", createNetworkResponse0.getNetworkStackId());
      assertEquals("", createNetworkResponse0.getNetworkId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      String string0 = createNetworkResponse0.getNetworkStackId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      String string0 = createNetworkResponse0.getNeutronNetworkId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      String string0 = createNetworkResponse0.getNetworkFqdn();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      createNetworkResponse0.setNetworkStackId("]xrJb:cD,G(|6B0(");
      String string0 = createNetworkResponse0.getNetworkStackId();
      assertEquals("]xrJb:cD,G(|6B0(", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      String string0 = createNetworkResponse0.getNetworkId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse("", "", "", "NetworkRollback [networkId=", boolean0, (Map<String, String>) null, (NetworkRollback) null, (String) null);
      createNetworkResponse0.getNetworkCreated();
      assertEquals("NetworkRollback [networkId=", createNetworkResponse0.getNetworkFqdn());
      assertEquals("", createNetworkResponse0.getNetworkStackId());
      assertEquals("", createNetworkResponse0.getNetworkId());
      assertEquals("", createNetworkResponse0.getNeutronNetworkId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      Map<String, String> map0 = createNetworkResponse0.getSubnetMap();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      NetworkRollback networkRollback0 = createNetworkResponse0.getRollback();
      assertFalse(networkRollback0.getNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      createNetworkResponse0.setNetworkId("]xrJb:cD,G(|6B0(");
      assertNull(createNetworkResponse0.getNetworkStackId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(", tenantId=");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NetworkRollback networkRollback0 = new NetworkRollback();
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse(", tenantId=", "L", "L", ", tenantId=", boolean0, (Map<String, String>) hashMap0, networkRollback0, "o+oNP;9q:Yc_JWzxM");
      assertEquals("L", createNetworkResponse0.getNeutronNetworkId());
      
      createNetworkResponse0.setNeutronNetworkId(", tenantId=");
      assertEquals(", tenantId=", createNetworkResponse0.getNetworkId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CreateNetworkResponse createNetworkResponse0 = new CreateNetworkResponse();
      Boolean boolean0 = Boolean.TRUE;
      createNetworkResponse0.setNetworkCreated(boolean0);
      assertNull(createNetworkResponse0.getNetworkStackId());
  }
}
