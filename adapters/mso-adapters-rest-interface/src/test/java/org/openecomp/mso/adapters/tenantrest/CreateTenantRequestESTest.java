/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:17:07 GMT 2016
 */

package org.openecomp.mso.adapters.tenantrest;

import org.junit.Test;
import static org.junit.Assert.*;

import org.openecomp.mso.entity.MsoRequest;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class CreateTenantRequestESTest extends CreateTenantRequestESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      createTenantRequest0.setTenantName("");
      String string0 = createTenantRequest0.getTenantName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      createTenantRequest0.setMsoRequest((MsoRequest) null);
      MsoRequest msoRequest0 = createTenantRequest0.getMsoRequest();
      assertNull(msoRequest0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      createTenantRequest0.setMetadata((Map<String, String>) null);
      Map<String, String> map0 = createTenantRequest0.getMetadata();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("+xMNxiyZP", (String) null);
      createTenantRequest0.setMetadata(hashMap0);
      Map<String, String> map0 = createTenantRequest0.getMetadata();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      Boolean boolean0 = new Boolean(true);
      createTenantRequest0.setFailIfExists(boolean0);
      Boolean boolean1 = createTenantRequest0.getFailIfExists();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      Boolean boolean0 = new Boolean("%Rg\"4z\"aLm@>#");
      createTenantRequest0.setFailIfExists(boolean0);
      Boolean boolean1 = createTenantRequest0.getFailIfExists();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      createTenantRequest0.setCloudSiteId("[E;Tr]]/");
      String string0 = createTenantRequest0.getCloudSiteId();
      assertEquals("[E;Tr]]/", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      createTenantRequest0.setCloudSiteId("");
      String string0 = createTenantRequest0.getCloudSiteId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      Boolean boolean0 = new Boolean(true);
      createTenantRequest0.setBackout(boolean0);
      Boolean boolean1 = createTenantRequest0.getBackout();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      Boolean boolean0 = Boolean.valueOf("I?$u7");
      createTenantRequest0.setBackout(boolean0);
      Boolean boolean1 = createTenantRequest0.getBackout();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      Boolean boolean0 = createTenantRequest0.getBackout();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      Boolean boolean0 = createTenantRequest0.getFailIfExists();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      String string0 = createTenantRequest0.getTenantName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      String string0 = createTenantRequest0.getCloudSiteId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      String string0 = createTenantRequest0.toString();
      assertEquals("CreateTenantRequest [cloudSiteId=null, tenantName=null, failIfExists=null, backout=null, metadata={}]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      MsoRequest msoRequest0 = createTenantRequest0.getMsoRequest();
      createTenantRequest0.setMsoRequest(msoRequest0);
      assertNull(createTenantRequest0.getTenantName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      createTenantRequest0.setTenantName("Z:%{KRDa=c\"`");
      String string0 = createTenantRequest0.getTenantName();
      assertEquals("Z:%{KRDa=c\"`", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CreateTenantRequest createTenantRequest0 = new CreateTenantRequest();
      Map<String, String> map0 = createTenantRequest0.getMetadata();
      createTenantRequest0.setMetadata(map0);
      assertEquals(0, map0.size());
  }
}
