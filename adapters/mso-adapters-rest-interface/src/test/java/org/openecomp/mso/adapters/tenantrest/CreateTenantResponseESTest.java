/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:18:27 GMT 2016
 */

package org.openecomp.mso.adapters.tenantrest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class CreateTenantResponseESTest extends CreateTenantResponseESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf((String) null);
      TenantRollback tenantRollback0 = new TenantRollback();
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse("<MtZQZIH{-M@", "<MtZQZIH{-M@", boolean0, tenantRollback0);
      String string0 = createTenantResponse0.toString();
      assertEquals("CreateTenantResponse [cloudSiteId=<MtZQZIH{-M@, tenantId=<MtZQZIH{-M@, tenantCreated=false, tenantRollback=VnfRollback: cloud=null, tenant=null, tenantCreated=false]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf((String) null);
      TenantRollback tenantRollback0 = new TenantRollback();
      tenantRollback0.setTenantCreated(true);
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse("<MtZQZIH{-M@", "<MtZQZIH{-M@", boolean0, tenantRollback0);
      TenantRollback tenantRollback1 = createTenantResponse0.getTenantRollback();
      assertSame(tenantRollback0, tenantRollback1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse();
      createTenantResponse0.setTenantId("");
      String string0 = createTenantResponse0.getTenantId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse();
      Boolean boolean0 = createTenantResponse0.getTenantCreated();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      TenantRollback tenantRollback0 = new TenantRollback();
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse("", "", boolean0, tenantRollback0);
      Boolean boolean1 = createTenantResponse0.getTenantCreated();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse();
      createTenantResponse0.setCloudSiteId("");
      String string0 = createTenantResponse0.getCloudSiteId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse();
      createTenantResponse0.setTenantRollback((TenantRollback) null);
      TenantRollback tenantRollback0 = createTenantResponse0.getTenantRollback();
      assertNull(tenantRollback0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse();
      String string0 = createTenantResponse0.getTenantId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse();
      TenantRollback tenantRollback0 = createTenantResponse0.getTenantRollback();
      assertFalse(tenantRollback0.getTenantCreated());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      TenantRollback tenantRollback0 = new TenantRollback();
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse("2@/.nLo", "2@/.nLo", boolean0, tenantRollback0);
      Boolean boolean1 = createTenantResponse0.getTenantCreated();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse("8{", "U<b`ZSrD;4T", boolean0, (TenantRollback) null);
      // Undeclared exception!
      try { 
        createTenantResponse0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.adapters.tenantrest.CreateTenantResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse();
      createTenantResponse0.setCloudSiteId("uj>\"L98");
      String string0 = createTenantResponse0.getCloudSiteId();
      assertEquals("uj>\"L98", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse();
      String string0 = createTenantResponse0.getCloudSiteId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse();
      createTenantResponse0.setTenantId("uj>\"L98");
      String string0 = createTenantResponse0.getTenantId();
      assertEquals("uj>\"L98", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CreateTenantResponse createTenantResponse0 = new CreateTenantResponse();
      Boolean boolean0 = Boolean.valueOf((String) null);
      createTenantResponse0.setTenantCreated(boolean0);
      assertNull(createTenantResponse0.getTenantId());
  }
}
