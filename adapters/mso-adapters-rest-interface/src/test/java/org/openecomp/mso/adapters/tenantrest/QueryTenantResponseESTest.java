/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:16:12 GMT 2016
 */

package org.openecomp.mso.adapters.tenantrest;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class QueryTenantResponseESTest extends QueryTenantResponseESTestscaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QueryTenantResponse queryTenantResponse0 = new QueryTenantResponse();
      String string0 = queryTenantResponse0.getTenantName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QueryTenantResponse queryTenantResponse0 = new QueryTenantResponse("", "jaxb.formatted.output", (Map<String, String>) null);
      String string0 = queryTenantResponse0.getTenantName();
      assertEquals("jaxb.formatted.output", string0);
      assertEquals("", queryTenantResponse0.getTenantId());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      QueryTenantResponse queryTenantResponse0 = new QueryTenantResponse("/d/SGl|KH4#n", "", (Map<String, String>) hashMap0);
      String string0 = queryTenantResponse0.getTenantId();
      assertEquals("", queryTenantResponse0.getTenantName());
      assertEquals("/d/SGl|KH4#n", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      QueryTenantResponse queryTenantResponse0 = new QueryTenantResponse(":!JHcoDwU", ":!JHcoDwU", (Map<String, String>) hashMap0);
      Map<String, String> map0 = queryTenantResponse0.getMetadata();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QueryTenantResponse queryTenantResponse0 = new QueryTenantResponse();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("3Lk\"uS,GJ", "3Lk\"uS,GJ");
      queryTenantResponse0.setMetadata(hashMap0);
      Map<String, String> map0 = queryTenantResponse0.getMetadata();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      QueryTenantResponse queryTenantResponse0 = new QueryTenantResponse("b", "", (Map<String, String>) hashMap0);
      String string0 = queryTenantResponse0.getTenantName();
      assertEquals("", string0);
      assertEquals("b", queryTenantResponse0.getTenantId());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QueryTenantResponse queryTenantResponse0 = new QueryTenantResponse();
      String string0 = queryTenantResponse0.getTenantId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      QueryTenantResponse queryTenantResponse0 = new QueryTenantResponse();
      Map<String, String> map0 = queryTenantResponse0.getMetadata();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      QueryTenantResponse queryTenantResponse0 = new QueryTenantResponse();
      queryTenantResponse0.setTenantName("hKe?S+T{hz:~0");
      assertEquals("hKe?S+T{hz:~0", queryTenantResponse0.getTenantName());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      QueryTenantResponse queryTenantResponse0 = new QueryTenantResponse();
      queryTenantResponse0.setTenantId("");
      String string0 = queryTenantResponse0.getTenantId();
      assertEquals("", string0);
  }
}
