/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:22:42 GMT 2016
 */

package org.openecomp.mso.adapters.tenantrest;

import org.junit.Test;
import static org.junit.Assert.*;

import org.openecomp.mso.openstack.exceptions.MsoExceptionCategory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class RollbackTenantErrorESTest extends RollbackTenantErrorESTestscaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RollbackTenantError rollbackTenantError0 = new RollbackTenantError();
      Boolean boolean0 = rollbackTenantError0.getRolledBack();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RollbackTenantError rollbackTenantError0 = new RollbackTenantError("w8nm;2F^\"Z", (MsoExceptionCategory) null, true);
      Boolean boolean0 = rollbackTenantError0.getRolledBack();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RollbackTenantError rollbackTenantError0 = new RollbackTenantError();
      String string0 = rollbackTenantError0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RollbackTenantError rollbackTenantError0 = new RollbackTenantError("=i_>GLf`");
      String string0 = rollbackTenantError0.getMessage();
      assertEquals("=i_>GLf`", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RollbackTenantError rollbackTenantError0 = new RollbackTenantError();
      rollbackTenantError0.getCategory();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MsoExceptionCategory msoExceptionCategory0 = MsoExceptionCategory.OPENSTACK;
      RollbackTenantError rollbackTenantError0 = new RollbackTenantError("", msoExceptionCategory0, false);
      rollbackTenantError0.setCategory(msoExceptionCategory0);
      assertEquals(MsoExceptionCategory.OPENSTACK, rollbackTenantError0.getCategory());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MsoExceptionCategory msoExceptionCategory0 = MsoExceptionCategory.OPENSTACK;
      RollbackTenantError rollbackTenantError0 = new RollbackTenantError("", msoExceptionCategory0, false);
      MsoExceptionCategory msoExceptionCategory1 = rollbackTenantError0.getCategory();
      assertEquals(MsoExceptionCategory.OPENSTACK, msoExceptionCategory1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MsoExceptionCategory msoExceptionCategory0 = MsoExceptionCategory.OPENSTACK;
      RollbackTenantError rollbackTenantError0 = new RollbackTenantError("", msoExceptionCategory0, false);
      String string0 = rollbackTenantError0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MsoExceptionCategory msoExceptionCategory0 = MsoExceptionCategory.OPENSTACK;
      RollbackTenantError rollbackTenantError0 = new RollbackTenantError("", msoExceptionCategory0, false);
      Boolean boolean0 = rollbackTenantError0.getRolledBack();
      rollbackTenantError0.setRolledBack(boolean0);
      assertEquals(MsoExceptionCategory.OPENSTACK, rollbackTenantError0.getCategory());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RollbackTenantError rollbackTenantError0 = new RollbackTenantError();
      rollbackTenantError0.setMessage("org.openecomp.mso.openstack.exceptions.MsoExceptionCategory");
      assertEquals("org.openecomp.mso.openstack.exceptions.MsoExceptionCategory", rollbackTenantError0.getMessage());
  }
}
