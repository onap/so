/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:18:37 GMT 2016
 */

package org.openecomp.mso.adapters.vnfrest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.openecomp.mso.entity.MsoRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class VolumeGroupRollbackESTest extends VolumeGroupRollbackESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.setVolumeGroupStackId("F");
      volumeGroupRollback0.getVolumeGroupStackId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.setVolumeGroupId("?4I<}KM{|IP");
      volumeGroupRollback0.getVolumeGroupId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MsoRequest msoRequest0 = new MsoRequest("", "");
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback("", "", false, "", "", msoRequest0, "");
      volumeGroupRollback0.getVolumeGroupId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MsoRequest msoRequest0 = new MsoRequest();
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback("q\"(B{+Ht7bO5", "q\"(B{+Ht7bO5", false, "q\"(B{+Ht7bO5", "q\"(B{+Ht7bO5", msoRequest0, "q\"(B{+Ht7bO5");
      volumeGroupRollback0.getTenantId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.setTenantId("");
      volumeGroupRollback0.getTenantId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MsoRequest msoRequest0 = new MsoRequest();
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback("", "", true, "", "", msoRequest0, "");
      volumeGroupRollback0.getMsoRequest();
      assertTrue(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.setMessageId("~O0>CjU'2WS");
      volumeGroupRollback0.getMessageId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.setMessageId("");
      volumeGroupRollback0.getMessageId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.setCloudSiteId("F");
      volumeGroupRollback0.getCloudSiteId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = null;
      try {
        volumeGroupRollback0 = new VolumeGroupRollback((VolumeGroupRollback) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.adapters.vnfrest.VolumeGroupRollback", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.getMsoRequest();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      boolean boolean0 = volumeGroupRollback0.isVolumeGroupCreated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.getVolumeGroupId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.getTenantId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.getCloudSiteId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.getMessageId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.setCloudSiteId("");
      volumeGroupRollback0.getCloudSiteId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.getVolumeGroupStackId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
      
      volumeGroupRollback0.setVolumeGroupCreated(true);
      boolean boolean0 = volumeGroupRollback0.isVolumeGroupCreated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      volumeGroupRollback0.setVolumeGroupStackId("");
      volumeGroupRollback0.getVolumeGroupStackId();
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      MsoRequest msoRequest0 = new MsoRequest();
      volumeGroupRollback0.setMsoRequest(msoRequest0);
      assertFalse(volumeGroupRollback0.isVolumeGroupCreated());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VolumeGroupRollback volumeGroupRollback0 = new VolumeGroupRollback();
      VolumeGroupRollback volumeGroupRollback1 = new VolumeGroupRollback(volumeGroupRollback0, "", "HC1I]xTWKN0*icHc]");
      assertEquals("", volumeGroupRollback1.getVolumeGroupStackId());
      assertFalse(volumeGroupRollback1.isVolumeGroupCreated());
      assertEquals("HC1I]xTWKN0*icHc]", volumeGroupRollback1.getMessageId());
  }
}
