/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:33:22 GMT 2016
 */

package org.openecomp.mso.adapters.network.async.client;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class NetworkRollbackESTest extends NetworkRollbackESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.networkUpdated = true;
      boolean boolean0 = networkRollback0.isNetworkUpdated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      networkRollback0.vlans = (List<Integer>) linkedList0;
      List<Integer> list0 = networkRollback0.getVlans();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.tenantId = "&Ks9_, 2}e``";
      String string0 = networkRollback0.getTenantId();
      assertEquals("&Ks9_, 2}e``", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.tenantId = "";
      String string0 = networkRollback0.getTenantId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.physicalNetwork = "'@3 VI0";
      String string0 = networkRollback0.getPhysicalNetwork();
      assertEquals("'@3 VI0", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.physicalNetwork = "";
      String string0 = networkRollback0.getPhysicalNetwork();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.neutronNetworkId = "";
      String string0 = networkRollback0.getNeutronNetworkId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkType("INXI`s_hhn8 |A");
      String string0 = networkRollback0.getNetworkType();
      assertEquals("INXI`s_hhn8 |A", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.networkType = "";
      String string0 = networkRollback0.getNetworkType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.networkStackId = "{vfF!&8J>*u,6e";
      String string0 = networkRollback0.getNetworkStackId();
      assertEquals("{vfF!&8J>*u,6e", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.networkStackId = "";
      String string0 = networkRollback0.getNetworkStackId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.networkName = "!mdg>u#";
      String string0 = networkRollback0.getNetworkName();
      assertEquals("!mdg>u#", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkName("");
      String string0 = networkRollback0.getNetworkName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkId(">jKMf7Ce<f,p<");
      String string0 = networkRollback0.getNetworkId();
      assertEquals(">jKMf7Ce<f,p<", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkId("");
      String string0 = networkRollback0.getNetworkId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      MsoRequest msoRequest0 = new MsoRequest();
      networkRollback0.msoRequest = msoRequest0;
      MsoRequest msoRequest1 = networkRollback0.getMsoRequest();
      assertSame(msoRequest1, msoRequest0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.cloudId = "wzy(*<k&K@W";
      String string0 = networkRollback0.getCloudId();
      assertEquals("wzy(*<k&K@W", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setCloudId("");
      String string0 = networkRollback0.getCloudId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      List<Integer> list0 = networkRollback0.getVlans();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      String string0 = networkRollback0.getNetworkName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkCreated(true);
      boolean boolean0 = networkRollback0.isNetworkCreated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      String string0 = networkRollback0.getTenantId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setPhysicalNetwork("T(SG{/@|z:");
      assertNull(networkRollback0.getNetworkName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      MsoRequest msoRequest0 = networkRollback0.getMsoRequest();
      assertNull(msoRequest0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      boolean boolean0 = networkRollback0.isNetworkCreated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      String string0 = networkRollback0.getNetworkStackId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      String string0 = networkRollback0.getCloudId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkUpdated(false);
      assertFalse(networkRollback0.isNetworkUpdated());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      String string0 = networkRollback0.getNetworkType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setMsoRequest((MsoRequest) null);
      assertNull(networkRollback0.getNetworkType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNeutronNetworkId("hiSG;1>|vJ^&^D");
      String string0 = networkRollback0.getNeutronNetworkId();
      assertEquals("hiSG;1>|vJ^&^D", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      boolean boolean0 = networkRollback0.isNetworkUpdated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      String string0 = networkRollback0.getNetworkId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setTenantId("");
      assertFalse(networkRollback0.isNetworkCreated());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      String string0 = networkRollback0.getPhysicalNetwork();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      String string0 = networkRollback0.getNeutronNetworkId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NetworkRollback networkRollback0 = new NetworkRollback();
      networkRollback0.setNetworkStackId("hiSG;1>|vJ^&^D");
      assertNull(networkRollback0.getNetworkType());
  }
}
