/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 10:46:51 GMT 2016
 */

package org.openecomp.mso.adapters.vnf.async.client;

import org.junit.Test;
import static org.junit.Assert.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class RollbackVnfNotificationESTest extends RollbackVnfNotificationESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RollbackVnfNotification rollbackVnfNotification0 = new RollbackVnfNotification();
      rollbackVnfNotification0.setMessageId(":HW@8Kxo`M[S:7>");
      String string0 = rollbackVnfNotification0.getMessageId();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RollbackVnfNotification rollbackVnfNotification0 = new RollbackVnfNotification();
      rollbackVnfNotification0.errorMessage = "INTERNAL";
      String string0 = rollbackVnfNotification0.getErrorMessage();
      assertEquals("INTERNAL", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RollbackVnfNotification rollbackVnfNotification0 = new RollbackVnfNotification();
      rollbackVnfNotification0.errorMessage = "";
      String string0 = rollbackVnfNotification0.getErrorMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RollbackVnfNotification rollbackVnfNotification0 = new RollbackVnfNotification();
      rollbackVnfNotification0.getException();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RollbackVnfNotification rollbackVnfNotification0 = new RollbackVnfNotification();
      rollbackVnfNotification0.setMessageId("");
      String string0 = rollbackVnfNotification0.getMessageId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RollbackVnfNotification rollbackVnfNotification0 = new RollbackVnfNotification();
      String string0 = rollbackVnfNotification0.getErrorMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RollbackVnfNotification rollbackVnfNotification0 = new RollbackVnfNotification();
      MsoExceptionCategory msoExceptionCategory0 = MsoExceptionCategory.INTERNAL;
      rollbackVnfNotification0.setException(msoExceptionCategory0);
      MsoExceptionCategory msoExceptionCategory1 = rollbackVnfNotification0.getException();
      assertSame(msoExceptionCategory1, msoExceptionCategory0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RollbackVnfNotification rollbackVnfNotification0 = new RollbackVnfNotification();
      rollbackVnfNotification0.setErrorMessage("");
      assertEquals("", rollbackVnfNotification0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RollbackVnfNotification rollbackVnfNotification0 = new RollbackVnfNotification();
      String string0 = rollbackVnfNotification0.getMessageId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RollbackVnfNotification rollbackVnfNotification0 = new RollbackVnfNotification();
      boolean boolean0 = rollbackVnfNotification0.isCompleted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RollbackVnfNotification rollbackVnfNotification0 = new RollbackVnfNotification();
      rollbackVnfNotification0.setCompleted(true);
      boolean boolean0 = rollbackVnfNotification0.isCompleted();
      assertTrue(boolean0);
  }
}
