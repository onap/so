/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 25 13:17:51 GMT 2016
 */

package org.openecomp.mso.asdc.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.openecomp.mso.db.catalog.beans.HeatTemplateParam;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.yaml.snakeyaml.Yaml;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class YamlEditorESTest extends YamlEditorESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      boolean boolean0 = yamlEditor0.isParentTemplate("file:///");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Yaml yaml0 = mock(Yaml.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(yaml0).dump(any());
      PrivateAccess.setVariable((Class<YamlEditor>) YamlEditor.class, yamlEditor0, "yaml", (Object) yaml0);
      yamlEditor0.encode((Map<String, Object>) hashMap0);
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(map0).get(any());
      PrivateAccess.setVariable((Class<YamlEditor>) YamlEditor.class, yamlEditor0, "yml", (Object) map0);
      yamlEditor0.toString();
      // Undeclared exception!
      try { 
        yamlEditor0.getYamlResourceTypeList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.asdc.util.YamlEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Yaml yaml0 = mock(Yaml.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<YamlEditor>) YamlEditor.class, yamlEditor0, "yaml", (Object) yaml0);
      Object object0 = new Object();
      Map<Integer, Object> map0 = (Map<Integer, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap0, object0).when(map0).get(any());
      PrivateAccess.setVariable((Class<YamlEditor>) YamlEditor.class, yamlEditor0, "yml", (Object) map0);
      yamlEditor0.getParameterList();
      // Undeclared exception!
      try { 
        yamlEditor0.getYamlResourceTypeList();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.util.Map
         //
         verifyException("org.openecomp.mso.asdc.util.YamlEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      // Undeclared exception!
      try { 
        yamlEditor0.getYamlNestedFileResourceTypeList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.asdc.util.YamlEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Yaml yaml0 = mock(Yaml.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<YamlEditor>) YamlEditor.class, yamlEditor0, "yaml", (Object) yaml0);
      Map<Integer, Object> map0 = (Map<Integer, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap0, (Object) null).when(map0).get(any());
      PrivateAccess.setVariable((Class<YamlEditor>) YamlEditor.class, yamlEditor0, "yml", (Object) map0);
      yamlEditor0.getYamlNestedFileResourceTypeList();
      // Undeclared exception!
      try { 
        yamlEditor0.getParameterList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.asdc.util.YamlEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)hashMap0.entrySet();
      hashMap0.put("null\n", set0);
      // Undeclared exception!
      try { 
        yamlEditor0.encode((Map<String, Object>) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>) mock(Set.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(set0).iterator();
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(map0).entrySet();
      doReturn(2655).when(map0).size();
      // Undeclared exception!
      try { 
        yamlEditor0.encode(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.yaml.snakeyaml.representer.BaseRepresenter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn((-300)).when(map0).size();
      // Undeclared exception!
      try { 
        yamlEditor0.encode(map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -300
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      YamlEditor yamlEditor0 = new YamlEditor(byteArray0);
      Map<HeatTemplateParam, String> map0 = (Map<HeatTemplateParam, String>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn("").when(map0).get(any());
      PrivateAccess.setVariable((Class<YamlEditor>) YamlEditor.class, yamlEditor0, "yml", (Object) map0);
      LinkedHashSet<HeatTemplateParam> linkedHashSet0 = new LinkedHashSet<HeatTemplateParam>();
      // Undeclared exception!
      try { 
        yamlEditor0.addParameterList(linkedHashSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Map
         //
         verifyException("org.openecomp.mso.asdc.util.YamlEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      YamlEditor yamlEditor0 = null;
      try {
        yamlEditor0 = new YamlEditor(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // special characters are not allowed
         //
         verifyException("org.yaml.snakeyaml.reader.StreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      YamlEditor yamlEditor0 = null;
      try {
        yamlEditor0 = new YamlEditor(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // while scanning a directive
         //  in 'reader', line 1, column 1:
         //     %
         //     ^
         // expected alphabetic or numeric character, but found \u0000(0)
         //  in 'reader', line 1, column 2:
         //     %
         //      ^
         //
         verifyException("org.yaml.snakeyaml.scanner.ScannerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-80);
      YamlEditor yamlEditor0 = null;
      try {
        yamlEditor0 = new YamlEditor(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.nio.charset.MalformedInputException: Input length = 1
         //
         verifyException("org.yaml.snakeyaml.reader.StreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)110;
      YamlEditor yamlEditor0 = null;
      try {
        yamlEditor0 = new YamlEditor(byteArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Map
         //
         verifyException("org.openecomp.mso.asdc.util.YamlEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      String string0 = yamlEditor0.encode();
      assertEquals("null\n", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Map<Integer, Object> map0 = (Map<Integer, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap0).when(map0).get(any());
      PrivateAccess.setVariable((Class<YamlEditor>) YamlEditor.class, yamlEditor0, "yml", (Object) map0);
      Set<HeatTemplateParam> set0 = (Set<HeatTemplateParam>) mock(Set.class, new ViolatedAssumptionAnswer());
      doReturn((Iterator) null).when(set0).iterator();
      // Undeclared exception!
      try { 
        yamlEditor0.addParameterList(set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.asdc.util.YamlEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      YamlEditor yamlEditor0 = new YamlEditor(byteArray0);
      HashMap<HeatTemplateParam, String> hashMap0 = new HashMap<HeatTemplateParam, String>();
      PrivateAccess.setVariable((Class<YamlEditor>) YamlEditor.class, yamlEditor0, "yml", (Object) hashMap0);
      LinkedHashSet<HeatTemplateParam> linkedHashSet0 = new LinkedHashSet<HeatTemplateParam>();
      HeatTemplateParam heatTemplateParam0 = mock(HeatTemplateParam.class, new ViolatedAssumptionAnswer());
      doReturn(">!=_`7`2d(").when(heatTemplateParam0).getParamName();
      doReturn(">!=_`7`2d(").when(heatTemplateParam0).getParamType();
      linkedHashSet0.add(heatTemplateParam0);
      yamlEditor0.addParameterList(linkedHashSet0);
      Set<HeatTemplateParam> set0 = yamlEditor0.getParameterList();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Map<Integer, Object> map0 = (Map<Integer, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap0).when(map0).get(any());
      hashMap0.put(yamlEditor0, "V28");
      PrivateAccess.setVariable((Class<YamlEditor>) YamlEditor.class, yamlEditor0, "yml", (Object) map0);
      // Undeclared exception!
      try { 
        yamlEditor0.getParameterList();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Map
         //
         verifyException("org.openecomp.mso.asdc.util.YamlEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Map<Integer, Object> map0 = (Map<Integer, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap0).when(map0).get(any());
      PrivateAccess.setVariable((Class<YamlEditor>) YamlEditor.class, yamlEditor0, "yml", (Object) map0);
      List<String> list0 = yamlEditor0.getYamlResourceTypeList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      // Undeclared exception!
      try { 
        yamlEditor0.isParentTemplate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.asdc.util.YamlEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      yamlEditor0.verifyTemplate();
      yamlEditor0.isParentTemplate("\"");
      Map<String, Object> map0 = (Map<String, Object>) mock(Map.class, new ViolatedAssumptionAnswer());
      doReturn(yamlEditor0).when(map0).get(any());
      PrivateAccess.setVariable((Class<YamlEditor>) YamlEditor.class, yamlEditor0, "yml", (Object) map0);
      // Undeclared exception!
      try { 
        yamlEditor0.getYamlNestedFileResourceTypeList();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.openecomp.mso.asdc.util.YamlEditor cannot be cast to java.util.Map
         //
         verifyException("org.openecomp.mso.asdc.util.YamlEditor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = yamlEditor0.encode((Map<String, Object>) hashMap0);
      assertEquals("{}\n", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      YamlEditor yamlEditor0 = null;
      try {
        yamlEditor0 = new YamlEditor((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      YamlEditor yamlEditor0 = new YamlEditor();
      String string0 = yamlEditor0.toString();
      assertEquals("null\n", string0);
  }
}
