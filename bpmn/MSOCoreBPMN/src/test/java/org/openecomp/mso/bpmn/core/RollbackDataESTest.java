/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 11:33:44 GMT 2016
 */

package org.openecomp.mso.bpmn.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class RollbackDataESTest extends RollbackDataESTestscaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RollbackData rollbackData0 = new RollbackData();
      rollbackData0.put("", "", "");
      String string0 = (String)rollbackData0.get("", "0-0|Ox?");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RollbackData rollbackData0 = new RollbackData();
      Serializable serializable0 = rollbackData0.get("", "0-0|Ox?");
      assertNull(serializable0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RollbackData rollbackData0 = new RollbackData();
      rollbackData0.put("", "", "");
      String string0 = (String)rollbackData0.get("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RollbackData rollbackData0 = new RollbackData();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Serializable, Integer> hashMap1 = new HashMap<Serializable, Integer>();
      hashMap0.put("/0H\"wnR=^l|l$+qQDi", hashMap1);
      PrivateAccess.setVariable((Class<RollbackData>) RollbackData.class, rollbackData0, "dictionary", (Object) hashMap0);
      Map<String, Serializable> map0 = rollbackData0.get("/0H\"wnR=^l|l$+qQDi");
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RollbackData rollbackData0 = new RollbackData();
      rollbackData0.put("RollbackData[]", "$", "RollbackData[]");
      Map<String, Serializable> map0 = rollbackData0.get("RollbackData[]");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RollbackData rollbackData0 = new RollbackData();
      rollbackData0.put("org.openecomp.mso.bpmn.core.RollbackData", "org.openecomp.mso.bpmn.core.RollbackData", "!{=|?cluq? yk]).");
      rollbackData0.get("");
      PrivateAccess.setVariable((Class<RollbackData>) RollbackData.class, rollbackData0, "dictionary", (Object) null);
      // Undeclared exception!
      try { 
        rollbackData0.get("org.openecomp.mso.bpmn.core.RollbackData");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.bpmn.core.RollbackData", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RollbackData rollbackData0 = new RollbackData();
      rollbackData0.put("$", "$", "RollbackData[]");
      rollbackData0.put("RollbackData[]", "$", "RollbackData[]");
      String string0 = rollbackData0.toString();
      assertEquals("RollbackData[${$=RollbackData[]},RollbackData[]{$=RollbackData[]}]", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RollbackData rollbackData0 = new RollbackData();
      rollbackData0.put("$", "$", "RollbackData[]");
      rollbackData0.put("$", "RollbackData[]", "RollbackData[]");
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RollbackData rollbackData0 = new RollbackData();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<Serializable, Integer> hashMap1 = new HashMap<Serializable, Integer>();
      hashMap0.put("/0H\"wnR=^l|l$+qQDi", hashMap1);
      PrivateAccess.setVariable((Class<RollbackData>) RollbackData.class, rollbackData0, "dictionary", (Object) hashMap0);
      boolean boolean0 = rollbackData0.hasType("/0H\"wnR=^l|l$+qQDi");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RollbackData rollbackData0 = new RollbackData();
      boolean boolean0 = rollbackData0.hasType("RollbackData[]");
      assertFalse(boolean0);
  }
}
