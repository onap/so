/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 13:47:41 GMT 2016
 */

package com.att.camunda.bpm.plugin.urnmap.resources;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.att.camunda.bpm.plugin.urnmap.db.URNData;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class URNResourceESTest extends URNResourceESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      URNResource uRNResource0 = new URNResource("pE|b");
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-3202)).when(preparedStatement0).executeUpdate();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      PrivateAccess.setVariable((Class<URNResource>) URNResource.class, uRNResource0, "conn", (Object) connection0);
      uRNResource0.insertNewRow("pE|b");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URNResource uRNResource0 = new URNResource("pE|b");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      PrivateAccess.setVariable((Class<URNResource>) URNResource.class, uRNResource0, "conn", (Object) connection0);
      uRNResource0.insertNewRow("pE|b");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URNResource uRNResource0 = new URNResource("");
      List<URNData> list0 = uRNResource0.getUrnDataMap();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URNResource uRNResource0 = new URNResource("pE|b");
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn((-3202)).when(preparedStatement0).executeUpdate();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      PrivateAccess.setVariable((Class<URNResource>) URNResource.class, uRNResource0, "conn", (Object) connection0);
      URNData uRNData0 = new URNData();
      uRNResource0.getPersistData(uRNData0);
      assertNull(uRNData0.getVer_());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URNResource uRNResource0 = new URNResource("pE|b");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      doReturn((PreparedStatement) null).when(connection0).prepareStatement(anyString());
      PrivateAccess.setVariable((Class<URNResource>) URNResource.class, uRNResource0, "conn", (Object) connection0);
      URNData uRNData0 = new URNData();
      uRNResource0.getPersistData(uRNData0);
      assertNull(uRNData0.getVer_());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URNResource uRNResource0 = new URNResource("LR6iOYH?>Bg%1-x=lK");
      // Undeclared exception!
      try { 
        uRNResource0.insertNewRow("LR6iOYH?>Bg%1-x=lK");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URNResource uRNResource0 = new URNResource("");
      // Undeclared exception!
      try { 
        uRNResource0.insertNewRow((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URNResource uRNResource0 = new URNResource("pE|b");
      // Undeclared exception!
      try { 
        uRNResource0.getUrnDataMapOLD();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.camunda.bpm.cockpit.Cockpit", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      URNResource uRNResource0 = new URNResource("");
      Connection connection0 = uRNResource0.getDBConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URNResource uRNResource0 = new URNResource("pE|b");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connection0).toString();
      PrivateAccess.setVariable((Class<URNResource>) URNResource.class, uRNResource0, "conn", (Object) connection0);
      Connection connection1 = uRNResource0.getDBConnection();
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URNResource uRNResource0 = new URNResource("pE|b");
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).next();
      PreparedStatement preparedStatement0 = mock(PreparedStatement.class, new ViolatedAssumptionAnswer());
      doReturn(resultSet0).when(preparedStatement0).executeQuery();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn("").when(connection0).toString();
      doReturn(preparedStatement0).when(connection0).prepareStatement(anyString());
      PrivateAccess.setVariable((Class<URNResource>) URNResource.class, uRNResource0, "conn", (Object) connection0);
      List<URNData> list0 = uRNResource0.getUrnDataMap();
      assertTrue(list0.isEmpty());
  }
}
