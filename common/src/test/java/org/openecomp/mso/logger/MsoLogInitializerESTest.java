/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 09:06:06 GMT 2016
 */

package org.openecomp.mso.logger;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class MsoLogInitializerESTest extends MsoLogInitializerESTestscaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MsoLogInitializer msoLogInitializer0 = new MsoLogInitializer();
      ServletContextEvent servletContextEvent0 = mock(ServletContextEvent.class, new ViolatedAssumptionAnswer());
      doReturn((ServletContext) null).when(servletContextEvent0).getServletContext();
      msoLogInitializer0.contextInitialized(servletContextEvent0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MsoLogInitializer msoLogInitializer0 = new MsoLogInitializer();
      Boolean boolean0 = (Boolean)PrivateAccess.callMethod((Class<MsoLogInitializer>) MsoLogInitializer.class, msoLogInitializer0, "fileIsReadable", (Object) "", (Class<?>) String.class);
      assertTrue(boolean0);
  }
}
