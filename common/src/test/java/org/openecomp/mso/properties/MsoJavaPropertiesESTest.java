/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 10 08:35:35 GMT 2016
 */

package org.openecomp.mso.properties;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.FileNotFoundException;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;

import org.openecomp.mso.logger.MsoLogger;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class MsoJavaPropertiesESTest extends MsoJavaPropertiesESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      msoJavaProperties0.setProperty("", "J6");
      msoJavaProperties0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      String string0 = msoJavaProperties0.getProperty("IK#uRP]", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      String string0 = msoJavaProperties0.getProperty("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      int int0 = msoJavaProperties0.getIntProperty("RA_VNF_NOT_EXIST", (-1417));
      assertEquals((-1417), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      String string0 = msoJavaProperties0.getEncryptedProperty("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      msoJavaProperties0.automaticRefreshInMinutes = 1821;
      MsoJavaProperties msoJavaProperties1 = msoJavaProperties0.clone();
      assertNotSame(msoJavaProperties1, msoJavaProperties0);
      assertEquals(1821, msoJavaProperties1.getAutomaticRefreshInMinutes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      msoJavaProperties0.automaticRefreshInMinutes = (-78);
      MsoJavaProperties msoJavaProperties1 = msoJavaProperties0.clone();
      assertNotSame(msoJavaProperties1, msoJavaProperties0);
      assertEquals(-78, msoJavaProperties1.getAutomaticRefreshInMinutes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      PrivateAccess.setVariable((Class<MsoJavaProperties>) MsoJavaProperties.class, msoJavaProperties0, "msoProperties", (Object) null);
      msoJavaProperties0.hashCode();
      msoJavaProperties0.hashCode();
      // Undeclared exception!
      try { 
        msoJavaProperties0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.properties.MsoJavaProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      // Undeclared exception!
      try { 
        msoJavaProperties0.setProperty((String) null, "+UaYo-~&{QxdaN(c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      MsoJavaProperties msoJavaProperties1 = msoJavaProperties0.clone();
      msoJavaProperties1.propertiesFileName = "";
      try { 
        msoJavaProperties1.reloadPropertiesFile();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
   * TODO: fails when run using maven, but succeeds when run using eclipse
   */
  @Ignore
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      // Undeclared exception!
      try { 
        msoJavaProperties0.loadPropertiesFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      try { 
        msoJavaProperties0.loadPropertiesFile("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      // Undeclared exception!
      try { 
        msoJavaProperties0.getIntProperty((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      msoJavaProperties0.setProperty("APIH_READ_VNFOUTPUT_CLOB_EXCEPTION", "");
      // Undeclared exception!
      try { 
        msoJavaProperties0.getEncryptedProperty("APIH_READ_VNFOUTPUT_CLOB_EXCEPTION", "", "k$&Fq}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"k$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      MsoJavaProperties msoJavaProperties1 = msoJavaProperties0.clone();
      msoJavaProperties1.clone();
      msoJavaProperties0.hashCode();
      MsoJavaProperties msoJavaProperties2 = msoJavaProperties1.clone();
      PrivateAccess.setVariable((Class<MsoJavaProperties>) MsoJavaProperties.class, msoJavaProperties0, "msoProperties", (Object) null);
      msoJavaProperties1.equals(msoJavaProperties2);
      MsoLogger msoLogger0 = AbstractMsoProperties.LOGGER;
      // Undeclared exception!
      try { 
        msoJavaProperties0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      int int0 = msoJavaProperties0.getIntProperty("", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      msoJavaProperties0.setProperty("-6;qct1", "");
      String string0 = msoJavaProperties0.toString();
      assertEquals("Config file null(Timer:0mins):\n-6;qct1=\n\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      boolean boolean0 = msoJavaProperties0.equals("APIH_READ_VNFOUTPUT_CLOB_EXCEPTION");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      boolean boolean0 = msoJavaProperties0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      boolean boolean0 = msoJavaProperties0.equals(msoJavaProperties0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      msoJavaProperties0.setProperty("APIH_READ_VNFOUTPUT_CLOB_EXCEPTION", "");
      // Undeclared exception!
      try { 
        msoJavaProperties0.getEncryptedProperty("APIH_READ_VNFOUTPUT_CLOB_EXCEPTION", ".", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      String string0 = msoJavaProperties0.getEncryptedProperty("YhmJSc|~L0$,?/oh", (String) null, "YhmJSc|~L0$,?/oh");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      msoJavaProperties0.setProperty("M;WrYY%E,;sa&4F", "M;WrYY%E,;sa&4F");
      boolean boolean0 = msoJavaProperties0.getBooleanProperty("M;WrYY%E,;sa&4F", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      boolean boolean0 = msoJavaProperties0.getBooleanProperty("", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      msoJavaProperties0.setProperty("M;WrYY%E,;sa&4F", "M;WrYY%E,;sa&4F");
      int int0 = msoJavaProperties0.getIntProperty("M;WrYY%E,;sa&4F", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      msoJavaProperties0.setProperty("", "J6");
      String string0 = msoJavaProperties0.getProperty("", "mso.properties.reload.time.minutes");
      assertNotNull(string0);
      assertEquals("J6", string0);
  }
  /**
   * TODO: fails when run using maven, but succeeds when run using eclipse
   */
  @Ignore
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      // Undeclared exception!
      try { 
        msoJavaProperties0.reloadPropertiesFile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      MsoJavaProperties msoJavaProperties1 = msoJavaProperties0.clone();
      assertTrue(msoJavaProperties1.equals((Object)msoJavaProperties0));
      
      msoJavaProperties0.setProperty("", "");
      boolean boolean0 = msoJavaProperties0.equals(msoJavaProperties1);
      assertFalse(boolean0);
      assertFalse(msoJavaProperties1.equals((Object)msoJavaProperties0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MsoJavaProperties msoJavaProperties0 = new MsoJavaProperties();
      int int0 = msoJavaProperties0.size();
      assertEquals(0, int0);
  }
}
