/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:18:49 GMT 2016
 */

package org.openecomp.mso.db.catalog;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.openecomp.mso.db.catalog.beans.HeatEnvironment;
import org.openecomp.mso.db.catalog.beans.HeatFiles;
import org.openecomp.mso.db.catalog.beans.HeatTemplate;
import org.openecomp.mso.db.catalog.beans.HeatTemplateParam;
import org.openecomp.mso.db.catalog.beans.Service;
import org.openecomp.mso.db.catalog.beans.ServiceRecipe;
import org.openecomp.mso.db.catalog.beans.VfModuleToHeatFiles;
import org.openecomp.mso.db.catalog.beans.VnfComponentsRecipe;
import org.openecomp.mso.db.catalog.beans.VnfRecipe;
import org.openecomp.mso.db.catalog.beans.VnfResource;
import org.openecomp.mso.logger.MessageEnum;
import org.openecomp.mso.logger.MsoLogger;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.PrivateAccess;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.hibernate.Query;
import org.hibernate.Session;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true)
public class CatalogDatabaseESTest extends CatalogDatabaseESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      VfModuleToHeatFiles vfModuleToHeatFiles0 = mock(VfModuleToHeatFiles.class, new ViolatedAssumptionAnswer());
      List<VfModuleToHeatFiles> list0 = (List<VfModuleToHeatFiles>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn(vfModuleToHeatFiles0).when(list0).get(anyInt());
      doReturn(false).when(list0).isEmpty();
      doReturn(1, 1).when(list0).size();
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyString() , any());
      List<ChronoLocalDate> list1 = (List<ChronoLocalDate>) mock(List.class, new ViolatedAssumptionAnswer());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query3 = mock(Query.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn("YF}DP?7kbDc>q", (String) null, "", "").when(session0).toString();
      doReturn(query1).when(session0).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      PrivateAccess.callMethod((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "getSession");
      PrivateAccess.callMethod((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "getSession");
      PrivateAccess.callMethod((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "getSession");
      // Undeclared exception!
      try {
        catalogDatabase0.getHeatTemplate((String) null);
        fail("Expecting exception: ClassCastException");

      } catch(ClassCastException e) {
         //
         // org.openecomp.mso.db.catalog.beans.VfModuleToHeatFiles$$EnhancerByMockitoWithCGLIB$$309d9392 cannot be cast to org.openecomp.mso.db.catalog.beans.HeatTemplate
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.APIH_GENERATED_REQUEST_ID;
      MessageEnum messageEnum1 = MessageEnum.APIH_DUPLICATE_CHECK_EXC;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(session0).toString();
      doReturn((Query) null).when(session0).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      HeatTemplate heatTemplate0 = mock(HeatTemplate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try {
        catalogDatabase0.getVfModuleType((String) null, (String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      VnfComponentsRecipe vnfComponentsRecipe0 = mock(VnfComponentsRecipe.class, new ViolatedAssumptionAnswer());
      List<VnfComponentsRecipe> list0 = (List<VnfComponentsRecipe>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(list0).isEmpty();
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyString() , any());
      List<MockThaiBuddhistDate> list1 = (List<MockThaiBuddhistDate>) mock(List.class, new ViolatedAssumptionAnswer());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      ServiceRecipe serviceRecipe0 = new ServiceRecipe();
      Query query3 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query2, query2, query2, query2).when(query3).setParameter(anyString() , any());
      doReturn(serviceRecipe0).when(query3).uniqueResult();
      Query query4 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query4).list();
      doReturn((Query) null, (Query) null, (Query) null).when(query4).setParameter(anyString() , any());
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn("F4D:=_l\"v%zem^./^", "", "", ",volTemplateId=", ", fileName=null").when(session1).toString();
      doReturn(",volTemplateId=").when(session1).save(any());
      doReturn(query1, query3, query4).when(session1).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session1);
      catalogDatabase0.getHeatEnvironment((-1));
      PrivateAccess.callMethod((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "getSession");
      Session session2 = mock(Session.class, new ViolatedAssumptionAnswer());
      HeatTemplate heatTemplate0 = mock(HeatTemplate.class, new ViolatedAssumptionAnswer());
      doReturn("~+(<.").when(heatTemplate0).getAsdcResourceName();
      doReturn("qOWRn", "@;i!EF=FjdS;").when(heatTemplate0).getTemplateName();
      doReturn("o~%Y*9E5Pu.f").when(heatTemplate0).getVersion();
      Iterator<HeatTemplateParam> iterator0 = (Iterator<HeatTemplateParam>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      HeatFiles heatFiles0 = mock(HeatFiles.class, new ViolatedAssumptionAnswer());
      doReturn("").when(heatFiles0).getAsdcResourceName();
      doReturn("@;i!EF=FjdS;", "~+(<.").when(heatFiles0).getFileName();
      doReturn((-1)).when(heatFiles0).getVnfResourceId();
      doReturn("i#C").when(heatFiles0).getVersion();
      catalogDatabase0.saveHeatFiles(heatFiles0);
      Set<HeatTemplateParam> set0 = (Set<HeatTemplateParam>) mock(Set.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try {
        catalogDatabase0.saveHeatTemplate(heatTemplate0, set0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      List<MockJapaneseDate> list0 = (List<MockJapaneseDate>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(list0).isEmpty();
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyString() , any());
      List<HeatFiles> list1 = (List<HeatFiles>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(list1).get(anyInt());
      doReturn(false).when(list1).isEmpty();
      doReturn(0).when(list1).size();
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query3 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(list1).when(query3).list();
      doReturn(query2, query2, query2).when(query3).setParameter(anyString() , any());
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn("F4D:=_l\"v%zem^./^", "po=vr", "po=vr", "po=vr").when(session1).toString();
      doReturn("po=vr").when(session1).save(any());
      doReturn(query1, query3).when(session1).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session1);
      catalogDatabase0.getHeatEnvironment((-1));
      PrivateAccess.callMethod((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "getSession");
      Session session2 = mock(Session.class, new ViolatedAssumptionAnswer());
      HeatTemplate heatTemplate0 = mock(HeatTemplate.class, new ViolatedAssumptionAnswer());
      doReturn("").when(heatTemplate0).getAsdcResourceName();
      doReturn(0).when(heatTemplate0).getId();
      doReturn("", "RDu8*C_[t4L").when(heatTemplate0).getTemplateName();
      doReturn((String) null).when(heatTemplate0).getVersion();
      Iterator<HeatTemplateParam> iterator0 = (Iterator<HeatTemplateParam>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Set<HeatTemplateParam> set0 = (Set<HeatTemplateParam>) mock(Set.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(set0).iterator();
      // Undeclared exception!
      try {
        catalogDatabase0.saveHeatTemplate(heatTemplate0, set0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.RA_DB_INVALID_STATUS;
      MessageEnum messageEnum1 = MessageEnum.LOGGER_UPDATE_SUC;
      MessageEnum messageEnum2 = MessageEnum.ASDC_ARTIFACT_DOWNLOAD_FAIL;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(session0).toString();
      doReturn((Query) null).when(session0).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      // Undeclared exception!
      try {
        catalogDatabase0.getService(hashMap0, "Successfully. No template found");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(session0).toString();
      doReturn((Query) null).when(session0).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      // Undeclared exception!
      try {
        catalogDatabase0.getNestedTemplates(2377);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.APIH_QUERY_PARAM_WRONG;
      MessageEnum messageEnum1 = MessageEnum.RA_SEND_REQUEST_SDNC;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(session0).toString();
      doReturn((Query) null).when(session0).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      // Undeclared exception!
      try {
        catalogDatabase0.getVnfComponentsRecipe("Generic exception searching for vnf_id=", (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      List<VnfRecipe> list0 = (List<VnfRecipe>) mock(List.class, new ViolatedAssumptionAnswer());
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(query0, query0).when(query1).setParameter(anyString() , any());
      doReturn((Object) null).when(query1).uniqueResult();
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query2).list();
      doReturn((Query) null).when(query2).setParameter(anyString() , any());
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn("F4D:=_l\"v%zem^./^", "getVfModuleRecipe").when(session1).toString();
      doReturn(query1, query2).when(session1).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session1);
      catalogDatabase0.getVnfComponent(187, "");
      // Undeclared exception!
      try {
        catalogDatabase0.getHeatEnvironment((-1));
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getNetworkRecipe("735uWxa&iIbU.4]O$", ",hpGX76\"X~ow4", (String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.APIH_PROPERTY_LOAD_SUC;
      MessageEnum messageEnum1 = MessageEnum.ASDC_ARTIFACT_DOWNLOAD_FAIL;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(session0).toString();
      doReturn((Query) null).when(session0).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      // Undeclared exception!
      try {
        catalogDatabase0.getVnfComponentsRecipeByVfModuleId("", "(3", "");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(session0).toString();
      doReturn((Query) null).when(session0).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      PrivateAccess.callMethod((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "getSession");
      // Undeclared exception!
      try {
        catalogDatabase0.getVnfComponentsRecipe("B4@1", "v@(U", "", (String) null, "", "");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(session0).toString();
      doReturn((Query) null).when(session0).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      // Undeclared exception!
      try {
        catalogDatabase0.getService((String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(session0).toString();
      doReturn((Query) null).when(session0).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      // Undeclared exception!
      try {
        catalogDatabase0.getVfModuleModelName("", "RiY");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.RA_UPDATE_TENANT_ERR;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(session0).toString();
      doReturn((Query) null).when(session0).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      VnfRecipe vnfRecipe0 = mock(VnfRecipe.class, new ViolatedAssumptionAnswer());
      Service service0 = new Service();
      // Undeclared exception!
      try {
        catalogDatabase0.saveService(service0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(session0).toString();
      doReturn((Query) null).when(session0).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      // Undeclared exception!
      try {
        catalogDatabase0.getNetworkRecipe("735uWxa&iIbU.4]O$", ",hpGX76\"X~ow4", "");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      HeatTemplate heatTemplate0 = mock(HeatTemplate.class, new ViolatedAssumptionAnswer());
      VnfResource vnfResource0 = mock(VnfResource.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try {
        catalogDatabase0.saveService((Service) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.RA_CREATE_NETWORK_EXC;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      HeatTemplate heatTemplate0 = new HeatTemplate();
      LinkedHashSet<HeatTemplateParam> linkedHashSet0 = new LinkedHashSet<HeatTemplateParam>();
      // Undeclared exception!
      try {
        catalogDatabase0.saveHeatTemplate((HeatTemplate) null, (Set<HeatTemplateParam>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      VnfResource vnfResource0 = mock(VnfResource.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(vnfResource0).getId();
      doReturn("#5|%>JWRPJfP)S@").when(vnfResource0).getVnfType();
      // Undeclared exception!
      try {
        catalogDatabase0.saveOrUpdateVnfResource(vnfResource0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.RA_ANALYZE_ERROR_EXC;
      MsoLogger.StatusCode.values();
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.saveVnfRecipe((VnfRecipe) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Service service0 = mock(Service.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(service0).getServiceName();
      doReturn((String) null, (String) null).when(service0).getServiceNameVersionId();
      doReturn((String) null).when(service0).getServiceVersion();
      // Undeclared exception!
      try {
        catalogDatabase0.saveService(service0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.APIH_BAD_ORDER;
      MessageEnum messageEnum1 = MessageEnum.RA_SEND_VNF_NOTIF_ERR;
      MessageEnum messageEnum2 = MessageEnum.APIH_DB_ATTRIBUTE_NOT_FOUND;
      MessageEnum messageEnum3 = MessageEnum.RA_VNF_NOT_EXIST;
      MsoLogger.ErrorCode msoLogger_ErrorCode0 = MsoLogger.ErrorCode.PermissionError;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      HeatEnvironment heatEnvironment0 = new HeatEnvironment();
      // Undeclared exception!
      try {
        catalogDatabase0.saveHeatEnvironment(heatEnvironment0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.APIH_GENERAL_METRICS;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.saveHeatEnvironment((HeatEnvironment) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getVnfRecipe((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MsoLogger.ErrorCode.values();
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.rollback();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getAllHeatTemplates();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getHeatFilesForVfModule((-1539));
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getHeatEnvironment(0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getAllHeatEnvironment();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.commit();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      HeatFiles heatFiles0 = new HeatFiles();
      heatFiles0.setVersion("E0)WE F/LaV~i2U01");
      heatFiles0.setFileName("uIZl|");
      // Undeclared exception!
      try {
        catalogDatabase0.saveHeatFiles(heatFiles0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.saveVnfComponentsRecipe((VnfComponentsRecipe) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.INIT_LOGGER_FAIL;
      MessageEnum messageEnum1 = MessageEnum.ASDC_CREATE_SERVICE;
      MessageEnum messageEnum2 = MessageEnum.NO_PROPERTIES;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.healthCheck();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      catalogDatabase0.close();
      // Undeclared exception!
      try {
        catalogDatabase0.getHeatTemplate(1197);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getAllNetworkResources();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getVnfComponentsRecipe("Ikrt3T$WS\"UMs#Q", "Ikrt3T$WS\"UMs#Q", "Ikrt3T$WS\"UMs#Q", "");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getHeatTemplate((String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getVnfComponent(1987, "R$9=*_j3~I=:_");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getHeatFiles(0, "r#j>oJCQI5r'@)jSH", "K6#W1{s", "vRm");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getVnfResourcesByRole("");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.RA_ASYNC_DELETE_VNF;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getAllVnfResources();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      List<VfModuleToHeatFiles> list0 = (List<VfModuleToHeatFiles>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(list0).get(anyInt());
      doReturn(false).when(list0).isEmpty();
      doReturn(0, 0).when(list0).size();
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyString() , any());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query2).list();
      doReturn((Query) null).when(query2).setParameter(anyString() , any());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn("YF}DP?7kbDc>q", (String) null, "", "", "").when(session0).toString();
      doReturn(query1, query2).when(session0).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      PrivateAccess.callMethod((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "getSession");
      PrivateAccess.callMethod((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "getSession");
      PrivateAccess.callMethod((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "getSession");
      catalogDatabase0.getHeatTemplate((String) null);
      // Undeclared exception!
      try {
        catalogDatabase0.getHeatEnvironment(148);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      List<VnfComponentsRecipe> list0 = (List<VnfComponentsRecipe>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(list0).get(anyInt());
      doReturn(false).when(list0).isEmpty();
      doReturn(0).when(list0).size();
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyString() , any());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((Query) null, (Query) null, (Query) null, (Query) null).when(query2).setParameter(anyString() , any());
      doReturn((Object) null).when(query2).uniqueResult();
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn("F4D:=_l\"v%zem^./^", "", "", ",volTemplateId=", (String) null).when(session1).toString();
      doReturn(",volTemplateId=").when(session1).save(any());
      doReturn(query1, query2, (Query) null).when(session1).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session1);
      catalogDatabase0.getHeatEnvironment((-1));
      PrivateAccess.callMethod((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "getSession");
      Session session2 = mock(Session.class, new ViolatedAssumptionAnswer());
      HeatTemplate heatTemplate0 = mock(HeatTemplate.class, new ViolatedAssumptionAnswer());
      doReturn("~+(<.").when(heatTemplate0).getAsdcResourceName();
      doReturn("qOWRn", "@;i!EF=FjdS;").when(heatTemplate0).getTemplateName();
      doReturn("o~%Y*9E5Pu.f").when(heatTemplate0).getVersion();
      Iterator<HeatTemplateParam> iterator0 = (Iterator<HeatTemplateParam>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      HeatFiles heatFiles0 = mock(HeatFiles.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(heatFiles0).getAsdcResourceName();
      doReturn((String) null, (String) null).when(heatFiles0).getFileName();
      doReturn(0).when(heatFiles0).getVnfResourceId();
      doReturn((String) null).when(heatFiles0).getVersion();
      catalogDatabase0.saveHeatFiles(heatFiles0);
      Set<HeatTemplateParam> set0 = (Set<HeatTemplateParam>) mock(Set.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try {
        catalogDatabase0.saveHeatTemplate(heatTemplate0, set0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      List<HeatTemplateParam> list0 = (List<HeatTemplateParam>) mock(List.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(list0).get(anyInt());
      doReturn(false).when(list0).isEmpty();
      doReturn(0).when(list0).size();
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      Query query1 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(query1).list();
      doReturn(query0).when(query1).setParameter(anyString() , any());
      Query query2 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query2).list();
      doReturn((Query) null, (Query) null, (Query) null).when(query2).setParameter(anyString() , any());
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn("F4D:=_l\"v%zem^./^", "", "ASDC_PROPERTIES_NOT_FOUND").when(session1).toString();
      doReturn(query1, query2).when(session1).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session1);
      catalogDatabase0.getHeatEnvironment((-1));
      PrivateAccess.callMethod((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "getSession");
      Session session2 = mock(Session.class, new ViolatedAssumptionAnswer());
      HeatTemplate heatTemplate0 = mock(HeatTemplate.class, new ViolatedAssumptionAnswer());
      doReturn("-wAG8.gOR.b_dq").when(heatTemplate0).getAsdcResourceName();
      doReturn("", "f:DC0FeMtZ").when(heatTemplate0).getTemplateName();
      doReturn("F4D:=_l\"v%zem^./^").when(heatTemplate0).getVersion();
      Iterator<HeatTemplateParam> iterator0 = (Iterator<HeatTemplateParam>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      Set<HeatTemplateParam> set0 = (Set<HeatTemplateParam>) mock(Set.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try {
        catalogDatabase0.saveHeatTemplate(heatTemplate0, set0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session0);
      Query query0 = mock(Query.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(query0).list();
      doReturn((Query) null).when(query0).setParameter(anyString() , any());
      Session session1 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn("F4D:=_l\"v%zem^./^").when(session1).toString();
      doReturn(query0).when(session1).createQuery(anyString());
      PrivateAccess.setVariable((Class<CatalogDatabase>) CatalogDatabase.class, catalogDatabase0, "session", (Object) session1);
      // Undeclared exception!
      try {
        catalogDatabase0.getHeatEnvironment((-1));
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.GENERAL_EXCEPTION_ARG;
      MessageEnum messageEnum1 = MessageEnum.RA_EVALUATE_XPATH_ERROR;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      String string0 = ", vnfResourceId=";
      String string1 = "";
      String string2 = "U`9Z8:QQUr-c(T@_/)";
      String string3 = "$q')fpKG]Q&i\"'{x";
      // Undeclared exception!
      try {
        catalogDatabase0.getNetworkResource("FT>Ri6U\"Ks<.H/g[");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      int int0 = 1030;
      // Undeclared exception!
      try {
        catalogDatabase0.getAllVfModules();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MsoLogger.ResponseCode msoLogger_ResponseCode0 = MsoLogger.ResponseCode.DataNotFound;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getVfModuleType("serviceVersion", "serviceVersion");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MsoLogger.ResponseCode msoLogger_ResponseCode0 = MsoLogger.ResponseCode.Conflict;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getNestedTemplates(2377);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.APIH_SDNC_RESPONSE_ERROR;
      MessageEnum messageEnum1 = MessageEnum.ASDC_ARTIFACT_DOWNLOAD_SUC;
      MessageEnum messageEnum2 = MessageEnum.RA_UPDATE_NETWORK_ERR;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      String string0 = null;
      // Undeclared exception!
      try {
        catalogDatabase0.getVnfResource((String) null, (String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      String string0 = ", description=";
      // Undeclared exception!
      try {
        catalogDatabase0.getServiceRecipe((-1319), ", description=");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      String string0 = ",hpGX76\"X~ow4";
      String string1 = "735uWxa&iIbU.4]O$";
      String string2 = "APIH_ERROR_FROM_BPEL_SERVER";
      // Undeclared exception!
      try {
        catalogDatabase0.getNetworkRecipe("735uWxa&iIbU.4]O$", ",hpGX76\"X~ow4", "");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      String string0 = ",hpGX76\"X~ow4";
      String string1 = "APIH_ERROR_FROM_BPEL_SERVER";
      // Undeclared exception!
      try {
        catalogDatabase0.getNetworkRecipe("", ",hpGX76\"X~ow4");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      String string0 = "$iJG7Jh~P";
      String string1 = "b4v5f&LOV|\\";
      String string2 = "";
      String string3 = null;
      // Undeclared exception!
      try {
        catalogDatabase0.getVnfResource((String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      String string0 = "Ikrt3T$WS\"UMs#Q";
      String string1 = null;
      // Undeclared exception!
      try {
        catalogDatabase0.getServiceByUUID("Ikrt3T$WS\"UMs#Q");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      String string0 = "v@(U";
      // Undeclared exception!
      try {
        catalogDatabase0.getVnfComponentsRecipe("!4@@1", "v@(U", "", (String) null, "", "");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.RA_DB_INVALID_STATUS;
      MessageEnum messageEnum1 = MessageEnum.LOGGER_UPDATE_SUC;
      MessageEnum messageEnum2 = MessageEnum.ASDC_ARTIFACT_DOWNLOAD_FAIL;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try {
        catalogDatabase0.getService(hashMap0, "Successfully. No template found");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.APIH_PROPERTY_LOAD_SUC;
      MessageEnum messageEnum1 = MessageEnum.ASDC_ARTIFACT_DOWNLOAD_FAIL;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getVnfComponentsRecipeByVfModuleId("", "(3", "");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MsoLogger.ResponseCode msoLogger_ResponseCode0 = MsoLogger.ResponseCode.ServiceNotAvailable;
      MessageEnum messageEnum0 = MessageEnum.RA_CONFIG_LOAD;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      String string0 = "";
      String string1 = "RiY";
      // Undeclared exception!
      try {
        catalogDatabase0.getHeatEnvironment("", "RiY", "RiY");
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.RA_CREATE_NETWORK_EXC;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      int int0 = 4811;
      HeatTemplate heatTemplate0 = new HeatTemplate();
      LinkedHashSet<HeatTemplateParam> linkedHashSet0 = new LinkedHashSet<HeatTemplateParam>();
      // Undeclared exception!
      try {
        catalogDatabase0.saveHeatTemplate(heatTemplate0, (Set<HeatTemplateParam>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MessageEnum messageEnum0 = MessageEnum.APIH_QUERY_PARAM_WRONG;
      MessageEnum messageEnum1 = MessageEnum.RA_SEND_REQUEST_SDNC;
      CatalogDatabase catalogDatabase0 = new CatalogDatabase();
      // Undeclared exception!
      try {
        catalogDatabase0.getVnfComponentsRecipe("Generic exception searching for vnf_id=", (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.openecomp.mso.db.catalog.CatalogDatabase", e);
      }
  }
}
