/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:15:57 GMT 2016
 */

package org.openecomp.mso.db.catalog.beans;

import org.junit.Test;
import static org.junit.Assert.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class HeatNestedTemplateESTest extends HeatNestedTemplateESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      heatNestedTemplate0.setChildTemplateId(3403);
      heatNestedTemplate0.hashCode();
      assertEquals(3403, heatNestedTemplate0.getChildTemplateId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      heatNestedTemplate0.setParentTemplateId(1980);
      HeatNestedTemplate heatNestedTemplate1 = new HeatNestedTemplate();
      boolean boolean0 = heatNestedTemplate0.equals(heatNestedTemplate1);
      assertEquals(1980, heatNestedTemplate0.getParentTemplateId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      HeatNestedTemplate heatNestedTemplate1 = new HeatNestedTemplate();
      heatNestedTemplate0.setChildTemplateId((-2202));
      boolean boolean0 = heatNestedTemplate1.equals(heatNestedTemplate0);
      assertEquals(-2202, heatNestedTemplate0.getChildTemplateId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      boolean boolean0 = heatNestedTemplate0.equals(heatNestedTemplate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      heatNestedTemplate0.setProviderResourceFile("org.openecomp.mso.db.catalog.beans.HeatNestedTemplate");
      String string0 = heatNestedTemplate0.getProviderResourceFile();
      assertEquals("org.openecomp.mso.db.catalog.beans.HeatNestedTemplate", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      heatNestedTemplate0.setProviderResourceFile("");
      String string0 = heatNestedTemplate0.getProviderResourceFile();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      heatNestedTemplate0.setParentTemplateId(1173);
      int int0 = heatNestedTemplate0.getParentTemplateId();
      assertEquals(1173, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      heatNestedTemplate0.setParentTemplateId((-1085));
      int int0 = heatNestedTemplate0.getParentTemplateId();
      assertEquals((-1085), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      heatNestedTemplate0.setChildTemplateId(1307);
      int int0 = heatNestedTemplate0.getChildTemplateId();
      assertEquals(1307, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      heatNestedTemplate0.setChildTemplateId((-1857));
      int int0 = heatNestedTemplate0.getChildTemplateId();
      assertEquals((-1857), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      int int0 = heatNestedTemplate0.getParentTemplateId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      int int0 = heatNestedTemplate0.getChildTemplateId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      HeatNestedTemplate heatNestedTemplate1 = new HeatNestedTemplate();
      heatNestedTemplate1.setChildTemplateId(231);
      boolean boolean0 = heatNestedTemplate0.equals(heatNestedTemplate1);
      assertEquals(231, heatNestedTemplate1.getChildTemplateId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      boolean boolean0 = heatNestedTemplate0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      String string0 = heatNestedTemplate0.toString();
      assertEquals("ParentTemplateId=0, ChildTemplateId=0, providerResourceFile=null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      heatNestedTemplate0.setProviderResourceFile("org.openecomp.mso.db.catalog.beans.HeatNestedTemplate");
      String string0 = heatNestedTemplate0.toString();
      assertEquals("ParentTemplateId=0, ChildTemplateId=0,providerResourceFile=org.openecomp.mso.db.catalog.beans.HeatNestedTemplate", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      String string0 = heatNestedTemplate0.getProviderResourceFile();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      HeatNestedTemplate heatNestedTemplate1 = new HeatNestedTemplate();
      boolean boolean0 = heatNestedTemplate0.equals(heatNestedTemplate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HeatNestedTemplate heatNestedTemplate0 = new HeatNestedTemplate();
      heatNestedTemplate0.setParentTemplateId((-511));
      HeatNestedTemplate heatNestedTemplate1 = new HeatNestedTemplate();
      boolean boolean0 = heatNestedTemplate0.equals(heatNestedTemplate1);
      assertEquals(-511, heatNestedTemplate0.getParentTemplateId());
      assertFalse(boolean0);
  }
}
