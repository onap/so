/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:22:57 GMT 2016
 */

package org.openecomp.mso.db.catalog.beans;

import org.junit.Test;
import static org.junit.Assert.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class HeatTemplateParamESTest extends HeatTemplateParamESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      heatTemplateParam0.setRequired(true);
      boolean boolean0 = heatTemplateParam0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      heatTemplateParam0.setParamType("");
      String string0 = heatTemplateParam0.getParamType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      heatTemplateParam0.setParamName("c_(T_3dD%");
      String string0 = heatTemplateParam0.getParamName();
      assertEquals("c_(T_3dD%", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      heatTemplateParam0.setParamName("");
      String string0 = heatTemplateParam0.getParamName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      heatTemplateParam0.setParamAlias("Param=c_(T_3dD%,type=null,required=false,paramAlias=null");
      String string0 = heatTemplateParam0.getParamAlias();
      assertEquals("Param=c_(T_3dD%,type=null,required=false,paramAlias=null", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      heatTemplateParam0.setParamAlias("");
      String string0 = heatTemplateParam0.getParamAlias();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      heatTemplateParam0.setId(10);
      int int0 = heatTemplateParam0.getId();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      heatTemplateParam0.setId((-5343));
      int int0 = heatTemplateParam0.getId();
      assertEquals((-5343), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      heatTemplateParam0.setHeatTemplateId(10);
      int int0 = heatTemplateParam0.getHeatTemplateId();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      String string0 = heatTemplateParam0.toString();
      assertEquals("Param=null,type=null,required=false,paramAlias=null", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      int int0 = heatTemplateParam0.getHeatTemplateId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      String string0 = heatTemplateParam0.getParamType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      String string0 = heatTemplateParam0.getParamAlias();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      boolean boolean0 = heatTemplateParam0.isRequired();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      heatTemplateParam0.setHeatTemplateId((-1));
      int int0 = heatTemplateParam0.getHeatTemplateId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      int int0 = heatTemplateParam0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      String string0 = heatTemplateParam0.getParamName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HeatTemplateParam heatTemplateParam0 = new HeatTemplateParam();
      heatTemplateParam0.setParamType("(pA6");
      String string0 = heatTemplateParam0.getParamType();
      assertEquals("(pA6", string0);
  }
}
