/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:21:59 GMT 2016
 */

package org.openecomp.mso.db.catalog.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;

import java.sql.Timestamp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class NetworkResourceESTest extends NetworkResourceESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setTemplateId((-835));
      int int0 = networkResource0.getTemplateId();
      assertEquals((-835), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setOrchestrationMode("V");
      String string0 = networkResource0.getOrchestrationMode();
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setOrchestrationMode("");
      String string0 = networkResource0.getOrchestrationMode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setNeutronNetworkType(",aicVersionMin=");
      String string0 = networkResource0.getNeutronNetworkType();
      assertEquals(",aicVersionMin=", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setNeutronNetworkType("");
      String string0 = networkResource0.getNeutronNetworkType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setNetworkType("zOD2");
      String string0 = networkResource0.getNetworkType();
      assertEquals("zOD2", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setId(1);
      int int0 = networkResource0.getId();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setId((-6321));
      int int0 = networkResource0.getId();
      assertEquals((-6321), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setDescription("NETWORK=null,version=null,mode=null,template=0,neutronType=null,aicVersionMin=VO>5~X,aicVersionMax=VO>5~Xid=0");
      String string0 = networkResource0.getDescription();
      assertEquals("NETWORK=null,version=null,mode=null,template=0,neutronType=null,aicVersionMin=VO>5~X,aicVersionMax=VO>5~Xid=0", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setAicVersionMin("");
      String string0 = networkResource0.getAicVersionMin();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setAicVersionMax("E{6!_C$30Kby>]gllF");
      String string0 = networkResource0.getAicVersionMax();
      assertEquals("E{6!_C$30Kby>]gllF", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setAicVersionMax("");
      String string0 = networkResource0.getAicVersionMax();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(timestamp0).getTime();
      networkResource0.setCreated(timestamp0);
      String string0 = networkResource0.toString();
      assertEquals("NETWORK=null,version=null,mode=null,template=0,neutronType=null,aicVersionMin=null,aicVersionMax=nullid=0,created=1/1/70 12:00 AM", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      String string0 = networkResource0.toString();
      assertEquals("NETWORK=null,version=null,mode=null,template=0,neutronType=null,aicVersionMin=null,aicVersionMax=nullid=0", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      String string0 = networkResource0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setAicVersionMin("VO>5~X");
      String string0 = networkResource0.getAicVersionMin();
      assertEquals("VO>5~X", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      String string0 = networkResource0.getNeutronNetworkType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      String string0 = networkResource0.getOrchestrationMode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      String string0 = networkResource0.getAicVersionMax();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      String string0 = networkResource0.getAicVersionMin();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      int int0 = networkResource0.getTemplateId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setDescription("");
      String string0 = networkResource0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      String string0 = networkResource0.getNetworkType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      Timestamp timestamp0 = networkResource0.getCreated();
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      int int0 = networkResource0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setNetworkType("");
      String string0 = networkResource0.getNetworkType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NetworkResource networkResource0 = new NetworkResource();
      networkResource0.setTemplateId(2085);
      int int0 = networkResource0.getTemplateId();
      assertEquals(2085, int0);
  }
}
