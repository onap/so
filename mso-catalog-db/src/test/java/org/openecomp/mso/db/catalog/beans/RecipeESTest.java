/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 14 08:21:28 GMT 2016
 */

package org.openecomp.mso.db.catalog.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;

import java.sql.Timestamp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class RecipeESTest extends RecipeESTestscaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setOrchestrationUri("");
      String string0 = recipe0.toString();
      assertEquals("RECIPE: null,uri=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setServiceType("s5s< CkZ9K:R0~ ;");
      String string0 = recipe0.getServiceType();
      assertEquals("s5s< CkZ9K:R0~ ;", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setServiceType("");
      String string0 = recipe0.getServiceType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setRecipeTimeout((-639));
      int int0 = recipe0.getRecipeTimeout();
      assertEquals((-639), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.orchestrationUri = ".";
      String string0 = recipe0.getOrchestrationUri();
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setOrchestrationUri("");
      String string0 = recipe0.getOrchestrationUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setId(1);
      int int0 = recipe0.getId();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setId((-529));
      int int0 = recipe0.getId();
      assertEquals((-529), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setDescription("F+/=");
      String string0 = recipe0.getDescription();
      assertEquals("F+/=", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setDescription("");
      String string0 = recipe0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setAction("RECIPE: null,uri=null");
      String string0 = recipe0.getAction();
      assertEquals("RECIPE: null,uri=null", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.action = "";
      String string0 = recipe0.getAction();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(timestamp0).getTime();
      recipe0.setCreated(timestamp0);
      String string0 = recipe0.toString();
      assertEquals("RECIPE: null,uri=null,created=1/1/70 12:00 AM", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      int int0 = recipe0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      String string0 = recipe0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      int int0 = recipe0.getRecipeTimeout();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      recipe0.setRecipeTimeout(957);
      int int0 = recipe0.getRecipeTimeout();
      assertEquals(957, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      String string0 = recipe0.getAction();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      Timestamp timestamp0 = recipe0.getCreated();
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      String string0 = recipe0.getOrchestrationUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Recipe recipe0 = new Recipe();
      String string0 = recipe0.getServiceType();
      assertNull(string0);
  }
}
